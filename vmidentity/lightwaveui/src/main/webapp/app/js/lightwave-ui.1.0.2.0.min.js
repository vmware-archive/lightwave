/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
'use strict';

var module = angular.module('lightwave.ui');
module.config(config);

config.$inject = ['$httpProvider'];

function config($httpProvider) {
    $httpProvider.interceptors.push('httpLoginRedirect');
}*/

/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
'use strict';

var module = angular.module('lightwave.ui');
module.run(run);

run.$inject = ['$rootScope', '$location', '$cookieStore'];

function run($rootScope, $location, $cookieStore) {
    $rootScope.globals = $cookieStore.get('globals') || {};
    $rootScope.globals.errors = '';
    $rootScope.globals.crumbs = [];
    $rootScope.globals.vm = {};
    $rootScope.globals.vm.menus = [];

    $rootScope.$on('$locationChangeStart', function (event, next, current) {
        $rootScope.globals.errors = '';
        var isHomePageWithToken = $location.path().indexOf('/home') >= 0;
        var loggedIn = $rootScope.globals.currentUser;
        $rootScope.appLoad = false;
        if (!isHomePageWithToken && !loggedIn) {
            $rootScope.appLoad = true;
            $location.path('/home');
        }
    });
}*/

/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

angular.module('lightwave.ui.home', ['ngRoute']);
angular.module('lightwave.ui.sso', ['ngRoute']);
angular.module('lightwave.ui.sso.services', ['ngRoute']);
angular.module('lightwave.ui.shared.utils', ['ngRoute']);
angular.module('lightwave.ui.shared.components', ['ngRoute']);
angular.module('lightwave.ui.modules', ['ngRoute']);
angular.module('lightwave.ui.shared.directives',['ngRoute']);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.modules');
module.controller('PscComponentCntrl', ['$scope', '$rootScope', function($scope, $rootScope) {

}])
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.modules');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/ssohome', {
            templateUrl: 'modules/sso.summary.view.html',
            controller: 'SsoComponentCntrl'
        })
        .when('/directory', {
            templateUrl: 'modules/directory.summary.view.html',
            controller: 'ComponentCntrl'
        })
        .when('/psc', {
            templateUrl: 'modules/psc.summary.view.html',
            controller: 'PscComponentCntrl'
        })
        .when('/certificate', {
            templateUrl: 'modules/certificate.summary.view.html',
            controller: 'ComponentCntrl'
        });
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.modules');
module.controller('SsoComponentCntrl', ['$scope', '$rootScope',
        'IdentitySourceService', 'RelyingPartyService', 'IdentityProviderService', 'MemberService',
        function($scope, $rootScope, IdentitySourceService, RelyingPartyService, IdentityProviderService, MemberService ) {

        $scope.vm = this;
        $scope.vm.summary = {};

        init();

        function init() {
            $scope.vm.summarydataLoading = true;
            getIdentitySources();
            getRelyingParties();
            getIdentityProviders();
        }

        function getIdentitySources() {

            if($rootScope.globals.currentUser.role != 'GuestUser') {
                IdentitySourceService
                    .GetAll($rootScope.globals.currentUser)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.summary.identitySources = 0;
                            if (res.data)
                                $scope.vm.summary.identitySources = res.data.length;
                            var ids = res.data;
                            var identitySource = null;
                            if (ids && ids.length > 0) {

                                for (var i = 0; i < ids.length; i++) {

                                    if (ids[i].domainType == 'SYSTEM_DOMAIN') {
                                        identitySource = ids[i];
                                        break;
                                    }
                                }

                                if (identitySource) {
                                    getSolutionUsers(identitySource.name);
                                    getUsers(identitySource.name);
                                    getGroups(identitySource.name);
                                }
                                else {
                                    $scope.vm.summary.solutionUsers = 0;
                                    $scope.vm.summary.users = 0;
                                    $scope.vm.summary.groups = 0;
                                }
                                $scope.vm.summarydataLoading = false;
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function getRelyingParties() {
            if($rootScope.globals.currentUser.role == 'Administrator') {
                RelyingPartyService
                    .GetAll($rootScope.globals.currentUser, '')
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.summary.relyingParties = 0;
                            if (res.data)
                                $scope.vm.summary.relyingParties = res.data.length;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function getIdentityProviders(){
            if($rootScope.globals.currentUser.role == 'Administrator') {
                IdentityProviderService
                    .GetAll($rootScope.globals.currentUser, '')
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.summary.identityProviders = 0;
                            if (res.data)
                                $scope.vm.summary.identityProviders = res.data.length;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function getSolutionUsers(provider_name){
                MemberService
                    .Search($rootScope.globals.currentUser, provider_name, "SOLUTIONUSER", "NAME", '')
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.summary.solutionUsers = 0;
                            if (res.data && res.data.solutionUsers)
                                $scope.vm.summary.solutionUsers = res.data.solutionUsers.length;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }

        function getGroups(provider_name){
            MemberService
                .Search($rootScope.globals.currentUser, provider_name, "GROUP", "NAME", '')
                .then(function (res) {
                    if (res.status == 200) {
                        $scope.vm.summary.groups = 0;
                        if (res.data && res.data.groups)
                            $scope.vm.summary.groups = res.data. groups.length;
                    }
                    else {
                        $rootScope.globals.errors = res.data;
                    }
                });
        }

        function getUsers(provider_name){
            MemberService
                .Search($rootScope.globals.currentUser, provider_name, "USER", "NAME", '')
                .then(function (res) {
                    if (res.status == 200) {
                        $scope.vm.summary.users = 0;
                        if (res.data && res.data.users)
                            $scope.vm.summary.users = res.data.users.length;
                    }
                    else {
                        $rootScope.globals.errors = res.data;
                    }
                });
        }
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.home');
module.controller('HomeCntrl', ['$rootScope', '$cookies', '$location', '$scope', '$window', 'Configuration', 'Util',
                  'IdentitySourceService', 'RelyingPartyService', 'IdentityProviderService', 'MemberService',
        function($rootScope, $cookies, $location, $scope, $window, Configuration, Util,
                 IdentitySourceService, RelyingPartyService, IdentityProviderService, MemberService ) {

            $scope.vm = this;
            $scope.vm.summary = {};

            init();


            function init() {
                
                $rootScope.globals.errors = '';

                var qs = $location.search();
                var state = qs.state;

                var id_token = qs.id_token;
                var access_token = qs.access_token;
                var token_type = qs.token_type;
                var expires_in = qs.expires_in;
                if('logout' in qs)
                {
                    $rootScope.globals.currentUser = null;
                }
                else
                {
                    var loggedIn = $window.sessionStorage.currentUser;
                    if (!loggedIn) {
                        setcontext(id_token, access_token, token_type, expires_in, state);
                    }
                    else {
                        if (loggedIn == 'logout') {
                            setcontext(id_token, access_token, token_type, expires_in, state);
                        }
                        else {
                            $rootScope.globals.currentUser = JSON.parse($window.sessionStorage.currentUser);
                            redirectToSsoHome();
                        }
                    }
                }
            }

            function initSummary() {
                $scope.vm.summarydataLoading = true;
                getIdentitySources();
                getRelyingParties();
                getIdentityProviders();
            }

            function getIdentitySources() {

                if($rootScope.globals.currentUser.role != 'GuestUser') {
                    IdentitySourceService
                        .GetAll($rootScope.globals.currentUser)
                        .then(function (res) {
                            if (res.status == 200) {
                                $scope.vm.summary.identitySources = 0;
                                if (res.data)
                                    $scope.vm.summary.identitySources = res.data.length;
                                var ids = res.data;
                                var identitySource = null;
                                if (ids && ids.length > 0) {

                                    for (var i = 0; i < ids.length; i++) {

                                        if (ids[i].domainType == 'SYSTEM_DOMAIN') {
                                            identitySource = ids[i];
                                            break;
                                        }
                                    }

                                    if (identitySource) {
                                        getSolutionUsers(identitySource.name);
                                        getUsers(identitySource.name);
                                        getGroups(identitySource.name);
                                    }
                                    else {
                                        $scope.vm.summary.solutionUsers = 0;
                                        $scope.vm.summary.users = 0;
                                        $scope.vm.summary.groups = 0;
                                    }
                                    $scope.vm.summarydataLoading = false;
                                }
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        });
                }
            }

            function getRelyingParties() {
                if($rootScope.globals.currentUser.role == 'Administrator') {
                    RelyingPartyService
                        .GetAll($rootScope.globals.currentUser, '')
                        .then(function (res) {
                            if (res.status == 200) {
                                $scope.vm.summary.relyingParties = 0;
                                if (res.data)
                                    $scope.vm.summary.relyingParties = res.data.length;
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        });
                }
            }

            function getIdentityProviders(){
                if($rootScope.globals.currentUser.role == 'Administrator') {
                    IdentityProviderService
                        .GetAll($rootScope.globals.currentUser, '')
                        .then(function (res) {
                            if (res.status == 200) {
                                $scope.vm.summary.identityProviders = 0;
                                if (res.data)
                                    $scope.vm.summary.identityProviders = res.data.length;
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        });
                }
            }

            function getSolutionUsers(provider_name){
                MemberService
                    .Search($rootScope.globals.currentUser, provider_name, "SOLUTIONUSER", "NAME", '')
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.summary.solutionUsers = 0;
                            if (res.data && res.data.solutionUsers)
                                $scope.vm.summary.solutionUsers = res.data.solutionUsers.length;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }

            function getGroups(provider_name){
                MemberService
                    .Search($rootScope.globals.currentUser, provider_name, "GROUP", "NAME", '')
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.summary.groups = 0;
                            if (res.data && res.data.groups)
                                $scope.vm.summary.groups = res.data. groups.length;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }

            function getUsers(provider_name){
                MemberService
                    .Search($rootScope.globals.currentUser, provider_name, "USER", "NAME", '')
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.summary.users = 0;
                            if (res.data && res.data.users)
                                $scope.vm.summary.users = res.data.users.length;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }

            function redirectToSsoHome(){
                initSummary();
            }

            function setcontext(id_token, access_token, token_type, expires_in, state) {

                var decodedJwt = Util.decodeJWT(id_token);
                var decodedAccessJwt = Util.decodeJWT(access_token);
                $rootScope.globals = {
                    currentUser: {
                        server: getserver(decodedJwt.header.iss),//$location.host(),
                        tenant: decodedJwt.header.tenant,
                        username: decodedJwt.header.sub,
                        first_name: decodedJwt.header.given_name,
                        last_name: decodedJwt.header.family_name,
                        role: decodedAccessJwt.header.admin_server_role,
                        token: {
                            id_token: id_token,
                            token_type: token_type,
                            access_token: access_token,
                            expires_in: expires_in,
                            state: state
                        }
                    }
                };
                checkForSystemTenant();
            }

            function checkForSystemTenant() {

                $rootScope.globals.currentUser.isSystemTenant = false;
                IdentitySourceService
                    .GetAll($rootScope.globals.currentUser)
                    .then(function (res) {
                        if (res.status == 200) {
                            var identitySources = res.data;
                            for (var i = 0; i < identitySources.length; i++) {
                                if (identitySources[i].domainType == 'LOCAL_OS_DOMAIN') {
                                    $rootScope.globals.currentUser.isSystemTenant = true;
                                    break;
                                }
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                        $window.sessionStorage.currentUser = JSON.stringify($rootScope.globals.currentUser);
                        redirectToSsoHome();
                    });
            }

            function getserver(uri){

                var server_uri = uri.split('//')[1];
                var server_with_port = server_uri.split('/')[0];
               return server_with_port.split(':')[0];
            }

    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.home');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider.when('/home', {
        templateUrl: 'modules/sso.summary.view.html',
        controller: 'HomeCntrl'
    });
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('CertificateCntrl', ['$scope', '$rootScope', 'CertificateService', 'Util', 'popupUtil',
        function($scope, $rootScope, CertificateService, Util, popupUtil) {

            $scope.vm = this;
            $scope.showUpdateChain = showUpdateChain;
            $scope.vm.getchains = getchains;
            $scope.vm.viewcertificate = viewcertificate;
            $scope.certIndex = 1;

            init();

            function init() {
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
                $scope.vm.addchain = true;
                $scope.vm.chains = [];
                $scope.vm.currentCert = null;
                getchains('');
            }

            function showUpdateChain() {
                var template = 'sso/certificates/chain.update.html';
                var controller = 'ChainCntrl';
                popupUtil.open($scope, template, controller);
            }

            function getchains(searchText) {
                $scope.vm.certsdataLoading = true;
                CertificateService
                    .GetCertificateChain($rootScope.globals.currentUser)
                    .then(function (res) {
                        if (res.status == 200) {
                            var chains = res.data;
                            $scope.vm.origChains = [];
                            if (chains && chains.length > 0) {
                                for (var i = 0; i < chains.length; i++) {
                                    var chain = chains[chains.length - 1 - i];
                                    chain.active = (i == 0) ? "ACTIVE" : "INACTIVE";
                                    $scope.vm.origChains.push(chain);
                                }
                            }
                            populatemetadata($scope.vm.origChains);

                            $scope.vm.chains = [];
                                for (var i = 0; i < $scope.vm.origChains.length; i++) {

                                    var found = false;
                                    for(var j=0; j<$scope.vm.origChains[i].certificates.length; j++) {

                                        var cert = $scope.vm.origChains[i].certificates[j];
                                        if (!searchText || cert.metadata.subject.indexOf(searchText) > -1)
                                        {
                                            found = true;
                                        }
                                    }

                                    if(found)
                                    {
                                        $scope.vm.chains.push($scope.vm.origChains[i]);
                                    }
                                }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                        $scope.vm.certsdataLoading = false;
                        $scope.vm.currentCert = null;
                    });
            }

            function populatemetadata(chains) {

                if (chains) {
                    for (var i = 0; i < chains.length; i++) {
                        chains[i].name = "Chain " + (i + 1).toString();
                        for (var j = 0; j < chains[i].certificates.length; j++) {
                            var encoded = chains[i].certificates[j].encoded;
                            chains[i].certificates[j].metadata = Util.getCertificateDetails(encoded);
                        }
                    }
                }
            }

            function viewcertificate() {
                $rootScope.globals.errors = null;

                if ($scope.vm.currentCert) {
                    var template = 'shared/components/certificate/certificate.view.html';
                    var controller = 'CertificateViewerCntrl';
                    Util.viewCertificate($scope, $scope.vm.currentCert.encoded, template, controller);
                }
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/ssocertificate', {
            templateUrl: 'sso/certificates/certificate.view.html',
            controller: 'CertificateCntrl'
        });
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('ChainCntrl', ['$scope', '$rootScope', 'CertificateService', 'Util',
        function($scope, $rootScope, CertificateService, Util) {

        $scope.newchain = { certificates : []};
        $scope.updatechain = updatechain;
        $scope.removecertificate = removecertificate;
        $scope.viewcertificate = viewcertificate;
        $scope.setprivatekeycontent = setprivatekeycontent;
        $scope.setcertificatecontent = setcertificatecontent;
        $scope.isValid = isValid;

        init();

        function init(){
            $rootScope.globals.errors = null;
            $rootScope.globals.popup_errors = null;
        }

        function setprivatekeycontent(chain, contents){

            if(!chain) {
                chain = {};
            }

            //chain.privateKeyFilePath = "(selected)";
            chain.privateKey = {
                algorithm : 'RSA',
                encoded : contents
            };
        }

        function setcertificatecontent(chain, contents) {

            if(!chain) {
                chain = {};
            }

            //chain.certFilePath = "(selected)";
            if(!chain.certificates) {
                chain.certificates = [];
            }

            var metadata = Util.getCertificateDetails(contents);
            var certificate = {
                encoded : contents,
                metadata : metadata
            };
            chain.certificates.push(certificate);
        }

        function removecertificate(chain, certificate){

            if(chain) {
                for(var i=0; i<chain.certificates.length;i++){
                    if(chain.certificates[i].encoded == certificate.encoded) {
                        chain.certificates.splice(i, 1);
                        break;
                    }
                }
            }
        }

        function isValid() {
            return ($scope.newchain
            && $scope.newchain.certificates
            && $scope.newchain.certificates.length >= 2
            && $scope.newchain.privateKey);
        }

        function updatechain(chain) {

            $rootScope.globals.errors = null;
            var newchain = {
                privateKey: {
                    algorithm: chain.privateKey.algorithm,
                    encoded: Util.extractBase64Encoded(chain.privateKey.encoded)
                },
                certificates: []
            };

            for(var i=0; i< chain.certificates.length; i++) {
                var certificate = { encoded: chain.certificates[i].encoded };
                newchain.certificates.push(certificate);
            }

            if(newchain.certificates.length < 2)
            {
                $rootScope.globals.errors = { details : 'At-least 2 certificates needs to be present.'};
                return;
            }

            CertificateService
                .SetCertificateChain($rootScope.globals.currentUser, newchain)
                .then(function (res) {
                    if (res.status == 204) {
                        $rootScope.globals.errors = {details: 'Chain added successfully', success:true};
                        $scope.vm.addchain = true;
                        $scope.vm.getchains();
                        $scope.closeThisDialog('save');
                    }
                    else {
                        $rootScope.globals.popup_errors = res.data;
                    }

                });
        }

        function viewcertificate(certificate){

            if(certificate) {
                var template = 'shared/components/certificate/certificate.view.html';
                var controller = 'CertificateViewerCntrl';
                Util.viewCertificate($scope, certificate.encoded, template, controller);
            }
        }
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/identitysources', {
            templateUrl: 'sso/identitysources/identitysources.view.html',
            controller: 'IdentitySourcesCntrl'
        })
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('IdentitySourcesCntrl', ['$scope',  '$rootScope', 'popupUtil', 'IdentitySourceService', 'TenantService', 'Util',
        function($scope, $rootScope, popupUtil, IdentitySourceService, TenantService, Util) {

            $scope.vm = this;
            $scope.vm.getIdentitySources = getIdentitySources;
            $scope.vm.view = view;
            $scope.vm.edit = edit;
            $scope.vm.add = add;
            $scope.vm.deleteIdentitySource = deleteIdentitySource;
            $scope.vm.providerPolicy = {};
            $scope.vm.getClass = getClass;

            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
                getIdentitySources();
            }

            function add() {
                $scope.vm.isNew = true;
                $scope.vm.newIdentitySource = {
                        connectionStrings: [],
                        type: 'IDENTITY_STORE_TYPE_LDAP_WITH_AD_MAPPING'
                };
                $scope.vm.selectedIdentitysource = null;
                var template = 'sso/identitysources/identitysource/identitysource.add.html';
                var controller = 'IdentitySourceCntrl';
                popupUtil.open($scope, template, controller);
            }

            function edit(ids){
                $scope.vm.newIdentitySource = null;
                if(ids && ids.domainType == 'EXTERNAL_DOMAIN'){
                    $scope.vm.isNew = false;
                    $scope.vm.selectedIdentitysource = ids;
                    var template = 'sso/identitysources/identitysource/identitysource.edit.html';
                    var controller = 'IdentitySourceCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function view(ids){
                if(ids && ids.domainType == 'EXTERNAL_DOMAIN'){
                    $scope.vm.selectedIdentitysource = ids;
                    var template = 'sso/identitysources/identitysource/identitysource.view.html';
                    var controller = 'IdentitySourceCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function getIdentitySources(searchText) {
                $scope.vm.idsdataLoading = true;
                IdentitySourceService
                    .GetAll($rootScope.globals.currentUser)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.identitySources = res.data;
                            if($rootScope.globals.currentUser.isSystemTenant) {
                                getDefaultProvider();
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    })
                    .then(function (res) {
                        var identitySources = $scope.vm.identitySources;
                        $scope.vm.filteredIdentitySources = [];
                        if (identitySources != null && identitySources.length > 0) {
                            $scope.vm.selectedIdentitysource = $scope.vm.identitySources[0];
                            for (var i = 0; i < $scope.vm.identitySources.length; i++) {
                                if (!searchText ||
                                    searchText == '' ||
                                    identitySources[i].name.indexOf(searchText) > -1) {
                                    if (identitySources[i].domainType == 'EXTERNAL_DOMAIN') {

                                        if(identitySources[i].certificates) {
                                            for (var j = 0; j < identitySources[i].certificates.length; j++) {
                                                var encoded = identitySources[i].certificates[j].encoded;
                                                identitySources[i].certificates[j].metadata = Util.getCertificateDetails(encoded);
                                            }
                                        }
                                    }
                                    $scope.vm.filteredIdentitySources.push(identitySources[i]);
                                }
                            }
                        }
                        $scope.vm.idsdataLoading = false;
                    });
            }

            function getDefaultProvider() {
                var configs = ['PROVIDER'];

                TenantService
                    .GetConfiguration($rootScope.globals.currentUser, configs)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.providerPolicy = res.data.providerPolicy;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }

            function deleteIdentitySource(ids) {
                $rootScope.globals.errors = null;
                if(ids && ids.domainType == 'EXTERNAL_DOMAIN') {
                    IdentitySourceService
                        .Delete($rootScope.globals.currentUser, ids.name)
                        .then(function (res) {
                            if (res.status == 200 || res.status == 204) {
                                $rootScope.globals.errors = {details: 'Identity Source ' + ids.name + ' deleted successfully', success:true};
                                getIdentitySources();
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        });
                }
            }

            function getClass(isMatch, defaultFocus){
                if(defaultFocus && isMatch)
                {
                    return 'large-grid-content-row-selected';
                }
                return 'large-grid-content-row';
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('PolicyCntrl', ['$scope',  '$rootScope', 'popupUtil', 'TenantService', 'Util',
    function($scope, $rootScope, popupUtil, TenantService, Util) {

        $scope.vm = this;
        $scope.getConfig = getConfig;
        $scope.showEditLockoutPolicy = showEditLockoutPolicy;
        $scope.showEditTokenPolicy = showEditTokenPolicy;
        $scope.showEditPasswordPolicy = showEditPasswordPolicy;
        $scope.showEditBrandPolicy = showEditBrandPolicy;
        $scope.showEditAuthenticationPolicy = showEditAuthenticationPolicy;
        $scope.showlockoutpolicy = showlockoutpolicy;
        $scope.showtokenpolicy = showtokenpolicy;
        $scope.showpasswordpolicy = showpasswordpolicy;
        $scope.viewcertificate = viewcertificate;

        init();

        function init() {
            if($rootScope.globals.currentUser.isSystemTenant) {
                getConfig();
                $scope.vm.policyTab = 1;
            } else {
                $rootScope.globals.errors = "The tenant is either not a system tenant or you do not have access to this page";
            }
        }

        function showlockoutpolicy() {
            $scope.vm.policyTab = 1;
        }

        function showtokenpolicy() {
            $scope.vm.policyTab = 2;
        }

        function showpasswordpolicy() {
            $scope.vm.policyTab = 3;
        }

        function getConfig() {
            $rootScope.globals.errors = null;
            TenantService
                .GetConfiguration($rootScope.globals.currentUser)
                .then(function (res) {
                    if (res.status == 200) {
                        $scope.vm.policies = res.data;

                        if($scope.vm.policies.authenticationPolicy
                            && $scope.vm.policies.authenticationPolicy.clientCertificatePolicy
                            && $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.trustedCACertificates) {
                            var certs = $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.trustedCACertificates;
                            for (var i = 0; i < certs.length; i++) {
                                    certs[i].metadata = Util.getCertificateDetails(certs[i].encoded);
                            }
                        }
                    }
                    else {
                        $rootScope.globals.errors = res.data;
                    }
                });
        }

        function populatemetadata(chains) {


        }

        function showEditLockoutPolicy() {
            var template = 'sso/policies/lockout/lockout.edit.html';
            var controller = 'LockoutPolicyCntrl';
            popupUtil.open($scope, template, controller);
        }

        function showEditTokenPolicy() {
            var template = 'sso/policies/token/token.edit.html';
            var controller = 'TokenPolicyCntrl';
            popupUtil.open($scope, template, controller);
        }

        function showEditPasswordPolicy() {
            var template = 'sso/policies/password/password.edit.html';
            var controller = 'PasswordPolicyCntrl';
            popupUtil.open($scope, template, controller);
        }
        function showEditBrandPolicy() {
            var template = 'sso/policies/banner/banner.edit.html';
            var controller = 'BannerPolicyCntrl';
            popupUtil.open($scope, template, controller);
        }
        function showEditAuthenticationPolicy() {
            var template = 'sso/policies/authentication/authentication.edit.html';
            var controller = 'AuthenticationPolicyCntrl';
            popupUtil.open($scope, template, controller);
        }

        function viewcertificate(certificate){

            if(certificate) {
                var template = 'shared/components/certificate/certificate.view.html';
                var controller = 'CertificateViewerCntrl';
                Util.viewCertificate($scope, certificate.encoded, template, controller);
            }
        }
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/ssopolicies', {
            templateUrl: 'sso/policies/policies.view.html',
            controller: 'PolicyCntrl'
        });
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('ServiceProviderCntrl', ['$scope',  '$rootScope', 'popupUtil', 'Util', 'RelyingPartyService',
        'IdentityProviderService','OidcClientService',
        function($scope, $rootScope, popupUtil, Util, RelyingPartyService, IdentityProviderService, OidcClientService) {
            $scope.vm = this;
            $scope.vm.currentTab = 0;

            $scope.vm.tokenauthmethods = [{name:'none'}, {name:'private-key-jwt'}];

            /* Relying Party */
            $scope.vm.relyingparties = [];
            $scope.vm.addrelyingparty = true;
            $scope.currentrelyingparty = {};
            $scope.vm.newrelyingparty = {};

            $scope.vm.getallrelyingparty = getallrelyingparty;
            $scope.vm.viewrelyingparty = viewrelyingparty;
            $scope.vm.addNewRelyingParty = addNewRelyingParty;
            $scope.vm.editRelyingParty = editRelyingParty;
            $scope.vm.deleteRelyingParty = deleteRelyingParty;

            /* Identity Providers */
            $scope.vm.identityproviders = [];
            $scope.vm.addidentityprovider = true;
            $scope.currentidentityprovider = {};
            $scope.vm.newidentityprovider = {};

            $scope.vm.getallidentityprovider = getallidentityprovider;
            $scope.vm.viewidentityprovider = viewidentityprovider;
            $scope.vm.addNewIdentityProvider = addNewIdentityProvider;
            $scope.vm.editIdentityProvider = editIdentityProvider;
            $scope.vm.deleteIdentityProvider = deleteIdentityProvider;

            /* OIDC Clients */
            $scope.vm.oidcclients = [];
            $scope.vm.addoidcclient = true;
            $scope.currentoidcclient = {};
            $scope.vm.newoidcclient = {};

            $scope.vm.getalloidcclient = getalloidcclient;
            $scope.vm.viewoidcclient = viewoidcclient;
            $scope.vm.addNewOidcClient = addNewOidcClient;
            $scope.vm.editOidcClient = editOidcClient;
            $scope.vm.deleteOidcClient = deleteOidcClient;
            $scope.vm.canDeleteIdentityProvider = canDeleteIdentityProvider;
            $scope.vm.canEditIdentityProvider = canEditIdentityProvider;

            init();

            function init() {
                getallrelyingparty();
            }

            function addNewRelyingParty(){
                $scope.vm.isNewRelyingParty = true;
                var template = 'sso/serviceproviders/relyingparty/relyingparty.add.html';
                var controller = 'RelyingPartyCntrl';
                popupUtil.open($scope, template, controller);
            }

            function editRelyingParty(relyingParty){
                if(relyingParty) {
                    $scope.vm.isNewRelyingParty = false;
                    $scope.vm.selectedRelyingParty = relyingParty;
                    var template = 'sso/serviceproviders/relyingparty/relyingparty.edit.html';
                    var controller = 'RelyingPartyCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function deleteRelyingParty(relyingParty){

                if(relyingParty) {
                    $scope.error = '';
                    RelyingPartyService
                        .Delete($rootScope.globals.currentUser, relyingParty.name)
                        .then(function (res) {
                            if (res.status == 200 || res.status == 204) {
                                $rootScope.globals.errors = {
                                    details: 'Relying Party ' + relyingParty.name + ' deleted successfully',
                                    success: true
                                };
                                $scope.vm.selectedRelyingParty = null;
                                getallrelyingparty();
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        });
                }
            }

            function addNewIdentityProvider(){
                $scope.vm.isNewIdentityProvider = true;
                var template = 'sso/serviceproviders/identityprovider/identityprovider.add.html';
                var controller = 'IdentityProviderCntrl';
                popupUtil.open($scope, template, controller);
            }

            function editIdentityProvider(idp){
                if(idp) {
                    $scope.vm.isNewIdentityProvider = false;
                    $scope.vm.selectedIdentityProvider = idp;
                    var template = 'sso/serviceproviders/identityprovider/identityprovider.edit.html';
                    var controller = 'IdentityProviderCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function deleteIdentityProvider(idp){

                if(idp) {
                    $scope.error = '';
                    IdentityProviderService
                        .Delete($rootScope.globals.currentUser, idp.entityID)
                        .then(function (res) {
                            if (res.status == 200 || res.status == 204) {
                                $rootScope.globals.errors = {
                                    details: 'Identity Provider ' + idp.entityID + ' deleted successfully',
                                    success: true
                                };
                                $scope.vm.selectedIdentityProvider = null;
                                getallidentityprovider();
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        });
                }
            }

            function addNewOidcClient(){
                var template = 'sso/serviceproviders/oidcclient/oidcclient.add.html';
                var controller = 'OidcClientCntrl';
                popupUtil.open($scope, template, controller);
            }

            function editOidcClient(oidcClient){
                if(oidcClient) {
                    $scope.vm.selectedOIDCClient = oidcClient;
                    var template = 'sso/serviceproviders/oidcclient/oidcclient.edit.html';
                    var controller = 'OidcClientCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function deleteOidcClient(oidc){

                if(oidc) {
                    $scope.error = '';
                    OidcClientService
                        .Delete($rootScope.globals.currentUser, oidc.clientId)
                        .then(function (res) {
                            if (res.status == 200 || res.status == 204) {
                                $rootScope.globals.errors = {
                                    details: 'OIDC Client ' + oidc.clientId + ' deleted successfully',
                                    success: true
                                };
                                $scope.vm.selectedOIDCClient = null;
                                getalloidcclient();
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        });
                }
            }

            function canDeleteIdentityProvider() {
                var oidc = $scope.vm.selectedOIDCClient;
                return (oidc && oidc.oidcclientMetadataDTO && (!oidc.oidcclientMetadataDTO.logoutUri.endsWith('lightwaveui')));
            }

            function canEditIdentityProvider() {
                var oidc = $scope.vm.selectedOIDCClient;
                return (oidc && oidc.oidcclientMetadataDTO && (!oidc.oidcclientMetadataDTO.logoutUri.endsWith('lightwaveui')));
            }

            function getallrelyingparty(searchText) {

                $rootScope.globals.errors = null;
                $scope.vm.selectedRelyingparty = null;
                $scope.vm.rpdataLoading = true;
                $scope.vm.relyingparties = [];
                $scope.vm.currentTab = 0;
                $scope.currentrelyingparty = {};
                RelyingPartyService
                    .GetAll($rootScope.globals.currentUser, searchText)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.relyingparties = [];
                            var rps = res.data;
                            if (rps != null) {
                                for (var i = 0; i < rps.length; i++) {
                                    if ((!searchText || searchText == '') ||
                                        rps[i].name.indexOf(searchText) > -1) {
                                        rps[i].certificate.metadata = Util.getCertificateDetails(rps[i].certificate.encoded);
                                        $scope.vm.relyingparties.push(rps[i]);
                                    }
                                }
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                        $scope.vm.rpdataLoading = false;
                    });
            }

            function viewrelyingparty() {

                $rootScope.globals.errors = null;
                if($scope.vm.selectedRelyingParty) {
                    var template = 'sso/serviceproviders/relyingparty/relyingparty.view.html';
                    var controller = 'RelyingPartyCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function getallidentityprovider(searchText) {
                $rootScope.globals.errors = null;
                $scope.vm.selectedIdentityProvider = null;
                $scope.vm.idpdataLoading = true;
                $scope.vm.identityproviders = [];
                $scope.vm.currentTab = 1;
                $scope.currentidentityprovider = {};
                IdentityProviderService
                    .GetAll($rootScope.globals.currentUser, searchText)
                    .then(function (res) {
                        if (res.status == 200) {
                            var rps = res.data;
                            if (rps != null) {
                                for (var i = 0; i < rps.length; i++) {
                                    if (!searchText || searchText == '' || rps[i].entityId.indexOf(searchText) > -1) {

                                        if (rps[i].signingCertificates && rps[i].signingCertificates.certificates) {
                                            for (var j = 0; j < rps[i].signingCertificates.certificates.length; j++) {
                                                var cert = rps[i].signingCertificates.certificates[j];
                                                rps[i].signingCertificates.certificates[j].metadata = Util.getCertificateDetails(cert.encoded);
                                            }
                                        }
                                        $scope.vm.identityproviders.push(rps[i]);

                                    }
                                }
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                        $scope.vm.idpdataLoading = false;
                    });
            }

            function viewidentityprovider(){
                $rootScope.globals.errors = null;

                if($scope.vm.selectedIdentityProvider) {
                    var template = 'sso/serviceproviders/identityprovider/identityprovider.view.html';
                    var controller = 'IdentityProviderCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function getalloidcclient(searchText) {
                $rootScope.globals.errors = null;
                $scope.vm.selectedOIDCClient = null;
                $scope.vm.oidcdataLoading = true;
                $scope.vm.oidcclients = [];
                $scope.vm.currentTab = 2;
                $scope.currentoidcclient = {};
                OidcClientService
                    .GetAll($rootScope.globals.currentUser, searchText)
                    .then(function (res) {
                        if (res.status == 200) {
                            var rps = res.data;
                            if (!searchText || searchText == '') {
                                $scope.vm.oidcclients = rps;
                            } else if (rps != null) {
                                for (var i = 0; i < rps.length; i++) {
                                    if (rps[i].clientId.indexOf(searchText) > -1) {
                                        rps[i].oidcclientMetadataDTO.authMethod =
                                        {
                                            name: rps[i].oidcclientMetadataDTO.tokenEndpointAuthMethod
                                        };
                                        $scope.vm.oidcclients.push(rps[i]);
                                    }
                                }
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                        $scope.vm.oidcdataLoading = false;
                    });
            }

            function viewoidcclient(){
                $rootScope.globals.errors = null;

                if($scope.vm.selectedOIDCClient) {
                    var template = 'sso/serviceproviders/oidcclient/oidcclient.view.html';
                    var controller = 'OidcClientCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/serviceproviders', {
            templateUrl: 'sso/serviceproviders/serviceprovider.view.html',
            controller: 'ServiceProviderCntrl'
        });
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('ServerMgmtCntrl', ['$scope',  '$rootScope','ServerService', 'TenantService', 'Util', 'popupUtil',
    'AuthenticationService',
        function($scope, $rootScope, ServerService, TenantService, Util, popupUtil, AuthenticationService) {

            $scope.vm = this;
            $scope.vm.getcomputers = getcomputers;
            $scope.vm.gettenants = gettenants;
            $scope.vm.addTenant = addTenant;
            $scope.vm.deleteTenant = deleteTenant;

            init();

            function init() {

                $scope.vm.tenants = [];
                $scope.vm.filteredtenants = [];
                $scope.vm.newtenant = {
                    credentials: {
                        certificates: []
                    }
                };
            }

            function addTenant(){
                var template = 'sso/servermgmt/tenant/tenant.add.html';
                var controller = 'TenantCntrl';
                popupUtil.open($scope, template, controller);
            }

            function getcomputers(searchText) {
                if($rootScope.globals.currentUser.isSystemTenant) {
                    $rootScope.globals.errors = null;
                    $scope.vm.computersdataLoading = true;
                    ServerService
                        .Get($rootScope.globals.currentUser)
                        .then(function (res) {
                            if (res.status == 200) {
                                var comps = res.data;
                                if (!searchText || searchText == '') {
                                    $scope.vm.computers = comps;
                                } else if (comps != null) {
                                    $scope.vm.computers = [];
                                    for (var i = 0; i < comps.length; i++) {
                                        if (comps[i].hostname.indexOf(searchText) > -1) {
                                            $scope.vm.computers.push(comps[i]);
                                        }
                                    }
                                }
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                            $scope.vm.computersdataLoading = false;
                        });
                }
            }

            function gettenants(searchText) {
                $rootScope.globals.errors = null;
                var tenants = $scope.vm.tenants;
                if (!searchText || searchText == '') {
                    $scope.vm.filteredtenants = tenants;
                } else if (tenants != null && tenants.length > 0) {
                    $scope.vm.filteredtenants = [];
                    for (var i = 0; i < $scope.vm.tenants.length; i++) {
                        if (tenants[i].name.indexOf(searchText) > -1) {
                            $scope.vm.filteredtenants.push(tenants[i]);
                        }
                    }
                }
            }

            function deleteTenant(){
                $rootScope.globals.errors = null;
                TenantService
                    .Delete($rootScope.globals.currentUser)
                    .then(function (res) {
                        if (res.status == 200 || res.status == 204) {
                            TenantService.Cleanup($rootScope.globals.currentUser);
                            AuthenticationService.redirectToHome();
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/ssoservermgmt', {
            templateUrl: 'sso/servermgmt/servermgmt.view.html',
            controller: 'ServerMgmtCntrl'
        });
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('CertificateService', CertificateService);
CertificateService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function CertificateService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.GetCertificateChain = GetCertificateChain;
    service.GetPrivateKey = GetPrivateKey;
    service.SetTenantCredentials = SetTenantCredentials;
    service.AddCertificate = AddCertificate;
    service.DeleteCertificateChain = DeleteCertificateChain;
    service.SetCertificateChain = SetCertificateChain;
    return service;

    function GetCertificateChain(context, username) {
        var endpoint = Configuration.getCertificatesEndpoint(context.server, context.tenant,'');
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function GetPrivateKey(context, username) {
        var endpoint = Configuration.getPrivateKeysEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure)
    }

    function AddCertificate(context, certificate, user) {
        var endpoint = Configuration.getCertificatesEndpoint(context.server, context.tenant, '');
        return HttpService
            .getResponse(endpoint, 'POST', context.token, user)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function SetTenantCredentials(context, tenantCredentials) {
        var endpoint = Configuration.getPrivateKeysEndpoint(context.server, context.tenant, '');
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, tenantCredentials)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function SetCertificateChain(context, tenantCredentials) {
        var endpoint = Configuration.getPrivateKeysEndpoint(context.server, context.tenant, '');
        return HttpService
            .getResponse(endpoint, 'POST', context.token, tenantCredentials)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function DeleteCertificateChain(context, fingerprint) {
        var endpoint = Configuration.getCertificatesEndpoint(context.server, context.tenant, fingerprint);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure)
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('Configuration', Configuration);

function Configuration() {

    // Server Uri
    function getServerUri(server) {
        return 'https://' + server + ':443/';
    }

    // Lightwave UI
    function getLightwaveUri(server) {
        return 'https://' + server + '/lightwaveui';
    }

    // Open Id Connect login endpoint
    function getLoginEndpoint(server, tenant) {
        var serverUri = getServerUri(server);
        return serverUri + 'openidconnect/token/' + tenant;
    }

    // IDM endpoint
    function getIdmEndpoint(server) {
        var serverUri = getServerUri(server);
        return serverUri + 'idm';
    }

    function getDirEndpoint(server) {
        var serverUri = getServerUri(server);
        return serverUri + 'vmdir';
    }

    // Tenants endpoint
    function getDirTenantEndpoint(server, tenant) {
        var idmEndpoint = getDirEndpoint(server);
        return idmEndpoint + '/tenant/' + tenant;
    }

    function getTenantsEndpoint(server) {
        var idmEndpoint = getIdmEndpoint(server);
        return idmEndpoint + '/tenant/';
    }

    // Tenant endpoint
    function getTenantEndpoint(server, tenant) {
        var idmEndpoint = getIdmEndpoint(server);
        return idmEndpoint + '/tenant/' + tenant;
    }

    // Tenant cleanup endpoint
    function getTenantCleanupEndpoint(server, tenant) {

        var lightwaveEndpoint = getLightwaveUri(server);
        return lightwaveEndpoint + '/CleanupTenant?tenant=' + tenant;
    }
    // Open Id Connect login arguments
    function getLoginArgument(username, password) {
        username = username.replace('@', '%40');
        return 'grant_type=password&username=' + username + '&password=' + password + '&scope=openid+offline_access+id_groups+at_groups+rs_admin_server';
    }

    // Tenant configuration endpoint
    function getConfigEndpoint(server, tenant, policies) {

        var type = '';
        if(policies && policies.length > 0)
        {
            type = '?';
            for(var i = 0; i < policies.length; i++) {
                type = type + 'type=' + policies[i] + '&';
            }
            type = type.substr(0, type.length - 1);
        }
        var tenantEndpoint = getTenantEndpoint(server, tenant);
        return tenantEndpoint + '/config' + type;
    }

    // Tenant configuration endpoint
    function getDirConfigEndpoint(server, tenant, policies) {

        var type = '';
        if(policies && policies.length > 0)
        {
            type = '?';
            for(var i = 0; i < policies.length; i++) {
                type = type + 'type=' + policies[i] + '&';
            }
            type = type.substr(0, type.length - 1);
        }
        var tenantEndpoint = getDirTenantEndpoint(server, tenant);
        return tenantEndpoint + '/config' + type;
    }

    // Member search endpoint
    function getMemberSearchEndpoint(server, tenant) {
        var tenantEndpoint = getTenantEndpoint(server, tenant);
        return tenantEndpoint + '/search';
    }

    // User endpoint
    function getUserEndpoint(server, tenant, username) {
        var tenantEndpoint = getUsersEndpoint(server, tenant);
        return tenantEndpoint + '/' + username;
    }

    function getIdmUserEndpoint(server, tenant, username){
        var tenantEndpoint = getDirTenantEndpoint(server, tenant);
        var usersEndpoint = tenantEndpoint + '/users';
        var userEndpoint =usersEndpoint + "/" + username;
        return userEndpoint;
    }

    // User password endpoint
    function getUserPasswordEndpoint(server, tenant, username) {
        var userEndpoint = getIdmUserEndpoint(server, tenant, username);
        return userEndpoint + '/password';
    }

    // User groups
    function getUserGroupsEndpoint(server, tenant, username) {
        var userEndpoint = getIdmUserEndpoint(server, tenant, username);
        return userEndpoint + '/groups';
    }

    // Users all endpoint
    function getUsersEndpoint(server, tenant) {
        var tenantEndpoint = getDirTenantEndpoint(server, tenant);
        return tenantEndpoint + '/users';
    }

    // Solution User endpoint
    function getSolutionUserEndpoint(server, tenant, username) {
        var tenantEndpoint = getSolutionUsersEndpoint(server, tenant);
        return  tenantEndpoint + '/' + username;
    }

    // Solution Users all endpoint
    function getSolutionUsersEndpoint(server, tenant) {
        var tenantEndpoint = getDirTenantEndpoint(server, tenant);
        return tenantEndpoint + '/solutionusers';
    }

    // Group endpoint
    function getGroupEndpoint(server, tenant, name) {
        var tenantEndpoint = getGroupsEndpoint(server, tenant);
        return  tenantEndpoint + '/' + name;
    }

    // Groups endpoint
    function getGroupsEndpoint(server, tenant) {
        var tenantEndpoint = getDirTenantEndpoint(server, tenant);
        return tenantEndpoint + '/groups';
    }

    function getIdmGroupEndpoint(server, tenant, name){
        var tenantEndpoint = getDirTenantEndpoint(server, tenant);
        var groupsEndpoint = tenantEndpoint + '/groups';
        return groupsEndpoint + "/" + name;
    }


    // Group membership endpoint
    function getGroupMembership(server, tenant, upn, members, type){
        var groupEndpoint = getIdmGroupEndpoint(server, tenant, upn);
        return groupEndpoint + '/members?' + members + 'type=' + type;
    }

    // Identity sources endpoint
    function getAllIdentitySourcesEndpoint(server, tenant) {
        var tenantEndpoint = getTenantEndpoint(server, tenant);
        return tenantEndpoint + '/providers';
    }

    // Identity source endpoint
    function getIdentitySourceEndpoint(server, tenant, name) {
        var identitySourcesEndpoint = getAllIdentitySourcesEndpoint(server, tenant);
        return identitySourcesEndpoint + '/' + name;
    }

    // Server computers endpoint
    function getComputersEndpoint(server) {
        var idmEndpoint = getIdmEndpoint(server);
        return idmEndpoint + '/server/computers';
    }

    // Relying Party endpoint
    function getRelyingPartyEndpoint(server, tenant, name) {
        var groups = getRelyingPartiesEndpoint(server, tenant);
        return  groups + '/' + name;
    }

    // Relying Parties endpoint
    function getRelyingPartiesEndpoint(server, tenant) {
        var tenantEndpoint = getTenantEndpoint(server, tenant);
        return tenantEndpoint + '/relyingparty';
    }

    // External Identity Provider endpoint
    function getIdentityProviderEndpoint(server, tenant, name) {
        var idpEndpoint = getIdentityProvidersEndpoint(server, tenant);
        return  idpEndpoint + '/' + name;
    }

    // External Identity Providers endpoint
    function getIdentityProvidersEndpoint(server, tenant) {
        var tenantEndpoint = getTenantEndpoint(server, tenant);
        return tenantEndpoint + '/externalidp';
    }

    // Open ID Connect Client endpoint
    function getOpenIdConnectClientEndpoint(server, tenant, name) {
        var groups = getOpenIdConnectClientsEndpoint(server, tenant);
        return  groups + '/' + name;
    }

    // Open ID Connect Clients endpoint
    function getOpenIdConnectClientsEndpoint(server, tenant) {
        var tenantEndpoint = getTenantEndpoint(server, tenant);
        return tenantEndpoint + '/oidcclient';
    }
    // Certificates endpoint
    function getCertificateBaseEndpoint(server, tenant) {
        var tenantEndpoint = getTenantEndpoint(server, tenant);
        return tenantEndpoint + '/certificates';
    }

    // Certificates endpoint
    function getCertificatesEndpoint(server, tenant, fingerprint) {
        var url = getCertificateBaseEndpoint(server, tenant);
        var query = '';
        if(fingerprint && fingerprint.length > 0)
        {
            query = '&fingerprint' + fingerprint;
        }
        return url + '?scope=TENANT' + query;
    }

    // Private Key endpoint
    function getPrivateKeysEndpoint(server, tenant) {
        var certificatesEndpoint = getCertificateBaseEndpoint(server, tenant);
        return certificatesEndpoint + '/privatekey';
    }

    // Client Id
    function addClientId(server, tenant, clientId){
        var serverUri = getServerUri(server);
        return serverUri + "lightwaveui/RegisterOidc?tenant=" + tenant + "&clientId=" + clientId;
    }

    var service = {};
    service.getLoginEndpoint = getLoginEndpoint;
    service.getLoginArgument = getLoginArgument;
    service.getTenantsEndpoint = getTenantsEndpoint;
    service.getTenantEndpoint = getTenantEndpoint;
    service.getAllIdentitySourcesEndpoint = getAllIdentitySourcesEndpoint;
    service.getIdentitySourceEndpoint = getIdentitySourceEndpoint;
    service.getAllUsersEndpoint = getMemberSearchEndpoint;
    service.getSolutionUserEndpoint = getSolutionUserEndpoint;
    service.getSolutionUsersEndpoint = getSolutionUsersEndpoint;
    service.getUserEndpoint = getUserEndpoint;
    service.getUsersEndpoint = getUsersEndpoint;
    service.getGroupEndpoint = getGroupEndpoint;
    service.getGroupsEndpoint = getGroupsEndpoint;
    service.getConfigEndpoint = getConfigEndpoint;
    service.getComputersEndpoint = getComputersEndpoint;
    service.getUserGroupsEndpoint = getUserGroupsEndpoint;
    service.getGroupMembership = getGroupMembership;
    service.getRelyingPartyEndpoint = getRelyingPartyEndpoint;
    service.getRelyingPartiesEndpoint = getRelyingPartiesEndpoint;
    service.getIdentityProviderEndpoint = getIdentityProviderEndpoint;
    service.getIdentityProvidersEndpoint = getIdentityProvidersEndpoint;
    service.getOpenIdConnectClientEndpoint = getOpenIdConnectClientEndpoint;
    service.getOpenIdConnectClientsEndpoint = getOpenIdConnectClientsEndpoint;
    service.getPrivateKeysEndpoint = getPrivateKeysEndpoint;
    service.getCertificatesEndpoint = getCertificatesEndpoint;
    service.getUserPasswordEndpoint = getUserPasswordEndpoint;
    service.getDirConfigEndpoint = getDirConfigEndpoint;
    service.addClientId = addClientId;
    service.getTenantCleanupEndpoint = getTenantCleanupEndpoint;
    return service;
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('GroupService', GroupService);
GroupService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];


function GroupService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.Get = Get;
    service.Add = Add;
    service.Delete = Delete;
    service.Update = Update;
    service.GetMembership = GetMembership;
    service.UpdateMembers = UpdateMembers;
    service.DeleteMembers = DeleteMembers;
    return service;

    function Add(context, group) {
        var endpoint = Configuration.getGroupsEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, group)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Get(context, name) {
        var endpoint = Configuration.getGroupEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Update(context, group) {
        var endpoint = Configuration.getGroupEndpoint(context.server, context.tenant, group.upn);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, group)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure)
    }

    function Delete(context, name) {
        var endpoint = Configuration.getGroupEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function GetMembership(context, upn, type) {
        var endpoint = Configuration.getGroupMembership(context.server, context.tenant, upn, '', type);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function UpdateMembers(context, upn, members, type) {
        var endpoint = Configuration.getGroupMembership(context.server, context.tenant, upn, members, type);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, '')
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function DeleteMembers(context, upn, members, type) {
        var endpoint = Configuration.getGroupMembership(context.server, context.tenant, upn, members, type);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('HttpService', HttpService);

HttpService.$inject = ['$http','HttpConfiguration','AuthenticationService', '$window', '$q', '$rootScope'];

function HttpService($http, HttpConfiguration, AuthenticationService, $window, $q, $rootScope) {

    var service = {};
    service.getResponse = getResponse;
    return service;

    function getResponse(endpoint, verb, token, postData, isText, contentType) {

        var cType = contentType ? contentType : isText ? 'application/x-www-form-urlencoded; charset=utf-8' : 'application/json';

        return $http({
            url: endpoint,
            dataType: 'json',
            method: verb,
            data: postData != null && postData!= undefined ? postData : 'data',
            headers: HttpConfiguration.getHeaders(token, cType)
        }).then(handleSuccess, handleFailure);
    }

    function handleSuccess(response){
        return response;
    }

    function handleFailure(response){
        if(response.status == 401 && response.data.error == 'invalid_token') {
            var redirectUri = '/lightwaveui/Login?tenant=' + $rootScope.globals.currentUser.tenant;
            $window.sessionStorage.currentUser = 'logout';
            response.data.error = null;
            response.status = 200;
            $window.location.href = redirectUri;
            /*AuthenticationService.logout();*/
            return $q.reject(response);
        }
        return response;
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('IdentityProviderService', IdentityProviderService);

IdentityProviderService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function IdentityProviderService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.GetAll = GetAll;
    service.Get = Get;
    service.Delete = Delete;
    service.Create = Create;
    return service;

    function Get(context, name) {
        var endpoint = Configuration.getIdentityProviderEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function GetAll(context) {
        var endpoint = Configuration.getIdentityProvidersEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Delete(context, name) {
        var endpoint = Configuration.getIdentityProviderEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Create(context, idp) {
        var endpoint = Configuration.getIdentityProvidersEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, idp)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('IdentitySourceService', IdentitySourceService);

    IdentitySourceService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function IdentitySourceService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.GetAll = GetAll;
    service.Add = Add;
    service.Update = Update;
    service.Delete = Delete;
    service.TestConnectivity = TestConnectivity;
    return service;

    function GetAll(context) {
        var endpoint = Configuration.getAllIdentitySourcesEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Add(context, identitySource) {
        var endpoint = Configuration.getAllIdentitySourcesEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, identitySource)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure)
    }

    function Update(context, identitySource) {
        var endpoint = Configuration.getIdentitySourceEndpoint(context.server, context.tenant, identitySource.name);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, identitySource)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure)
    }

    function Delete(context, name) {
        var endpoint = Configuration.getIdentitySourceEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure)
    }

    function TestConnectivity(context, identitySource){
        var endpoint = Configuration.getAllIdentitySourcesEndpoint(context.server, context.tenant);
        endpoint = endpoint + "?probe=true";
        return HttpService
            .getResponse(endpoint, 'POST', context.token, identitySource)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure)
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('MemberService', MemberService);

MemberService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function MemberService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.Search = Search;
    return service;

    function Search(context, domain, type, searchBy, query) {
        var endpoint = Configuration.getAllUsersEndpoint(context.server, context.tenant);
        endpoint += "?domain=" + domain + "&type=" + type + "&searchBy=" + searchBy + "&query=" + query;
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('OidcClientService', OidcClientService);

OidcClientService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function OidcClientService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.GetAll = GetAll;
    service.Get = Get;
    service.Add = Add;
    service.Create = Create;
    service.Delete = Delete;
    service.Update = Update;
    service.AddClientId = AddClientId;
    return service;

    function Get(context, name) {
        var endpoint = Configuration.getOpenIdConnectClientEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function GetAll(context) {
        var endpoint = Configuration.getOpenIdConnectClientsEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Create(server, token, tenant, client) {
        var endpoint = Configuration.getOpenIdConnectClientsEndpoint(server, tenant);
        return HttpService
            .getResponse(endpoint, 'POST', token, client)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Add(context, client) {
        var endpoint = Configuration.getOpenIdConnectClientsEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, client)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function AddClientId(server, token, tenant, clientId) {
        var endpoint = Configuration.addClientId(server, tenant, clientId);
        return HttpService
            .getResponse(endpoint, 'GET', token, clientId)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Delete(context, name) {
        var endpoint = Configuration.getOpenIdConnectClientEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Update(context, client) {
        var endpoint = Configuration.getOpenIdConnectClientEndpoint(context.server, context.tenant, client.clientId);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, client.oidcclientMetadataDTO)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('OpenIdConnectService', OpenIdConnectService);

OpenIdConnectService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function OpenIdConnectService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.GetToken = GetToken;
    return service;

    function GetToken(server, tenant, username, password) {
        var endpoint = Configuration.getLoginEndpoint(server, tenant);
        var args = Configuration.getLoginArgument(username, password);
        return HttpService
            .getResponse(endpoint, 'POST', null, args, true)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('RelyingPartyService', RelyingPartyService);

RelyingPartyService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function RelyingPartyService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.GetAll = GetAll;
    service.Get = Get;
    service.Delete = Delete;
    service.Create = Create;
    service.Update = Update;
    return service;

    function Get(context, name) {
        var endpoint = Configuration.getRelyingPartyEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function GetAll(context) {
        var endpoint = Configuration.getRelyingPartiesEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Delete(context, name) {
        var endpoint = Configuration.getRelyingPartyEndpoint(context.server, context.tenant, name);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Create(context, rp) {
        var endpoint = Configuration.getRelyingPartiesEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, rp)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
    function Update(context, rp) {
        var endpoint = Configuration.getRelyingPartyEndpoint(context.server, context.tenant, rp.name);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, rp)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('ServerService', ServerService);

ServerService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function ServerService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.Get = Get;
    return service;

    function Get(context) {
        var endpoint = Configuration.getComputersEndpoint(context.server);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('SolutionUserService', SolutionUserService);

SolutionUserService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function SolutionUserService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.Get = Get;
    service.Add = Add;
    service.Delete = Delete;
    service.Update = Update;
    return service;

    function Get(context, username) {
        var endpoint = Configuration.getSolutionUserEndpoint(context.server, context.tenant, username);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Add(context, user) {
        var endpoint = Configuration.getSolutionUsersEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, user)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Update(context, user) {
        var endpoint = Configuration.getSolutionUserEndpoint(context.server, context.tenant, user.name);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, user)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Delete(context, username) {
        var endpoint = Configuration.getSolutionUserEndpoint(context.server, context.tenant, username);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('TenantService', TenantService);

TenantService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function TenantService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.Create = Create;
    service.Delete = Delete;
    service.Cleanup = Cleanup;
    service.GetConfiguration = GetConfiguration;
    service.UpdateConfiguration = UpdateConfiguration;
    service.UpdateDirConfiguration = UpdateDirConfiguration;
    return service;

    function GetConfiguration(context, policies) {
        var endpoint = Configuration.getConfigEndpoint(context.server, context.tenant, policies);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function UpdateConfiguration(context, policy) {
        var endpoint = Configuration.getConfigEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, policy)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function UpdateDirConfiguration(context, policy) {
        var endpoint = Configuration.getDirConfigEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, policy)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Create(context, tenant) {
        var endpoint = Configuration.getTenantsEndpoint(context.server);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, tenant)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Delete(context) {
        var endpoint = Configuration.getTenantEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
    function Cleanup(context) {
        var endpoint = Configuration.getTenantCleanupEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'GET', null, false, "text/html")
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso.services');
module.factory('UserService', UserService);

UserService.$inject = ['Configuration', 'HttpService', 'HandleHttpResponse'];

function UserService(Configuration, HttpService, HandleHttpResponse) {

    var service = {};
    service.Get = Get;
    service.Add = Add;
    service.Delete = Delete;
    service.Update = Update;
    service.GetGroups = GetGroups;
    service.SetPassword = SetPassword;
    return service;

    function GetGroups(context, upn) {
        var endpoint = Configuration.getUserGroupsEndpoint(context.server, context.tenant, upn);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Get(context, username) {
        var endpoint = Configuration.getUserEndpoint(context.server, context.tenant, username);
        return HttpService
            .getResponse(endpoint, 'GET', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Add(context, user) {
        var endpoint = Configuration.getUsersEndpoint(context.server, context.tenant);
        return HttpService
            .getResponse(endpoint, 'POST', context.token, user)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Update(context, user) {
        var endpoint = Configuration.getUserEndpoint(context.server, context.tenant, user.details.upn);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, user)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function Delete(context, username) {
        var endpoint = Configuration.getUserEndpoint(context.server, context.tenant, username);
        return HttpService
            .getResponse(endpoint, 'DELETE', context.token)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }

    function SetPassword(context, user, password){
        var endpoint = Configuration.getUserPasswordEndpoint(context.server, context.tenant, user.details.upn);
        return HttpService
            .getResponse(endpoint, 'PUT', context.token, password)
            .then(HandleHttpResponse.Success, HandleHttpResponse.Failure);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('UsersAndGroupsCntrl', ['$scope', '$rootScope', 'popupUtil', 'IdentitySourceService', 'MemberService',
    'Util', 'GroupService', 'UserService', 'SolutionUserService',
    function ($scope, $rootScope, popupUtil, IdentitySourceService, MemberService,
              Util, GroupService, UserService, SolutionUserService) {

        $scope.vm = this;
        $scope.refresh = refresh;
        $scope.currentTab = 0;
        $scope.membersearchtypes = [{name: 'user'}, {name: 'group'}, {name: 'all'}];

        /* Users */
        $scope.vm.search = "";
        $scope.addNewUser = true;
        $scope.currentPassword = null;
        $scope.currentuser = {};
        $scope.newuser = {};
        $scope.addUser = addUser;
        $scope.showSetPassword = showSetPassword;
        $scope.editUser = editUser;
        $scope.getusers = getusers;
        $scope.viewUser = viewUser;
        $scope.deleteUser = deleteUser;
        $scope.isuserguest = isuserguest;
        $scope.isuserregularuser = isuserregularuser;
        $scope.isuseradmin = isuseradmin;
        $scope.canceladdnewuser = canceladdnewuser;
        $scope.getClass = getClass;

        /* Solution User */
        $scope.allgroups = [];
        $scope.vm.solutionusersearch = "";
        $scope.addNewSolutionUser = true;
        $scope.currentsolutionuser = {};
        $scope.newsolutionuser = {};
        $scope.editSolutionUser = editSolutionUser;
        $scope.addSolutionUser = addSolutionUser;
        $scope.getsolutionusers = getsolutionusers;
        $scope.viewSolutionUser = viewSolutionUser;
        $scope.getsolutionuser = getsolutionuser;
        $scope.deleteSolutionUser = deleteSolutionUser;
        $scope.previewcertificate = previewcertificate;

        /* Groups */
        $scope.vm.groupsearch = "";
        $scope.addNewGroup = true;
        $scope.currentgroup = {};
        $scope.newgroup = {};
        $scope.editGroup = editGroup;
        $scope.editGroupMembership = editGroupMembership;
        $scope.viewGroupMembership = viewGroupMembership;
        $scope.getgroups = getgroups;
        $scope.addGroup = addGroup;
        $scope.viewGroup = viewGroup;
        $scope.getgroup = getgroup;
        $scope.deleteGroup = deleteGroup;

        /* Util functions */
        $scope.timeConverter = Util.unixToDateText;
        $scope.displaytime = Util.numberToTime;


        init();

        function init() {
            $scope.error = '';
            $scope.vm.usersdataLoading = true;
            if($rootScope.globals.tabs == null)
            {
                $rootScope.globals.tabs = {}
            }
            $rootScope.globals.tabs.usersAndGroups = 0;


            IdentitySourceService
                .GetAll($rootScope.globals.currentUser)
                .then(function (res) {
                    if (res.status == 200) {
                        setids(res.data);
                    }
                    else {
                        $rootScope.globals.errors = res.data;
                    }
                });
        }

        function setids(ids) {
            $scope.vm.identitysources = ids;
            if (ids != null && ids.length > 0) {

                for (var i = 0; i < ids.length; i++) {

                    if (ids[i].domainType == 'SYSTEM_DOMAIN') {
                        $scope.vm.identitysource = ids[i];
                        break;
                    }
                }
                getusers($scope.vm.identitysource, "");
            }
        }

        function viewUser(user) {
            $rootScope.globals.errors = null;

            if (user) {
                $scope.error = '';
                UserService
                    .Get($rootScope.globals.currentUser, user.name + '@' + user.domain)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.selectedUser = res.data;
                            var template = 'sso/usersandgroups/user/user.view.html';
                            var controller = 'UserCntrl';
                            popupUtil.open($scope, template, controller);
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });

            }
        }

        function viewSolutionUser(solutionuser) {
            if (solutionuser) {
                $scope.vm.selectedSolutionUser = solutionuser;
                var template = 'sso/usersandgroups/solutionuser/solutionuser.view.html';
                var controller = 'SolutionUserCntrl';
                popupUtil.open($scope, template, controller);
            }
        }


        function addSolutionUser() {
            var template = 'sso/usersandgroups/solutionuser/solutionuser.add.html';
            var controller = 'SolutionUserCntrl';
            popupUtil.open($scope, template, controller);
        }

        function viewGroup(group) {
            if (group) {
                $scope.vm.selectedGroup = group;
                var template = 'sso/usersandgroups/group/group.view.html';
                var controller = 'GroupCntrl';
                popupUtil.open($scope, template, controller);
            }
        }

        function getClass(isMatch){
            if(isMatch)
            {
                return 'large-grid-content-row-selected';
            }
            return 'large-grid-content-row';
        }

        function getusers(provider, name) {
            $scope.vm.userCounter = 0;
            $scope.error = '';
            $scope.vm.usersdataLoading = true;
            $scope.currentTab = 0;
            $rootScope.globals.tabs.usersAndGroups = $scope.currentTab;
            $scope.vm.selectedUser = null;
            if (provider) {
                $scope.currentuser = {};
                MemberService
                    .Search($rootScope.globals.currentUser, provider.name, "USER", "NAME", name)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.users = res.data.users;

                            if($scope.vm.users && $scope.vm.users.length > 0) {
                                $scope.vm.selectedUser = $scope.vm.users[0];
                            }
                            $scope.vm.usersdataLoading = false;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function showSetPassword(user) {
            var template = 'sso/usersandgroups/user/user.password.html';
            var controller = 'UserCntrl';
            popupUtil.open($scope, template, controller);
        }

        function addUser() {
            var template = 'sso/usersandgroups/user/user.add.html';
            var controller = 'UserCntrl';
            popupUtil.open($scope, template, controller);
        }

        function editUser(user) {
            if (user) {
                $scope.vm.selectedUser = user;
                var template = 'sso/usersandgroups/user/user.edit.html';
                var controller = 'UserCntrl';
                popupUtil.open($scope, template, controller);
            }
        }

        function editSolutionUser(user) {
            if (user) {
                $scope.vm.selectedSolutionUser = user;
                var template = 'sso/usersandgroups/solutionuser/solutionuser.edit.html';
                var controller = 'SolutionUserCntrl';
                popupUtil.open($scope, template, controller);
            }
        }

        function editGroup(group) {
            if (group) {
                $scope.vm.selectedGroup = group;
                var template = 'sso/usersandgroups/group/group.edit.html';
                var controller = 'GroupCntrl';
                popupUtil.open($scope, template, controller);
            }
        }

        function editGroupMembership(group) {
            if (group) {
                $scope.vm.selectedGroup = group;
                var template = 'sso/usersandgroups/group/group.members.edit.html';
                var controller = 'GroupMembersCntrl';
                popupUtil.open($scope, template, controller);
            }
        }

        function viewGroupMembership(group) {
            if (group) {


                $scope.vm.selectedGroup = group;
                var template = 'sso/usersandgroups/groupmembers/group.members.view.html';
                var controller = 'GroupMembersCntrl';
                popupUtil.open($scope, template, controller);
            }
        }

        function canceladdnewuser() {
            $scope.newuser = {};
            $scope.addNewUser = true;
            $scope.currentPassword = null;
        }

        function deleteUser(user) {

            if(user) {
                $scope.error = '';
                UserService
                    .Delete($rootScope.globals.currentUser, user.details.upn)
                    .then(function (res) {
                        if (res.status == 200 || res.status == 204) {
                            $scope.vm.selectedUser = null;
                            var provider = $scope.vm.identitysource;
                            $rootScope.globals.errors = {
                                details: 'User ' + user.details.upn + ' deleted successfully',
                                success: true
                            };
                            getusers(provider, $scope.vm.search);
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }


        function getgroups(providers, name) {
            $scope.error = '';
            $scope.vm.groupsdataLoading = true;
            $scope.newgroup = {};
            $scope.addNewGroup = true;
            $scope.currentTab = 2;
            $rootScope.globals.tabs.usersAndGroups = $scope.currentTab;
            $scope.vm.selectedGroup = null;
            if (providers != null) {
                var provider_name = '';
                for (var i = 0; i < providers.length; i++) {
                    if (providers[i].domainType == 'SYSTEM_DOMAIN') {
                        provider_name = providers[i].name;
                    }
                }

                $scope.currentgroup = {};
                MemberService
                    .Search($rootScope.globals.currentUser, provider_name, "GROUP", "NAME", name)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.groups = res.data.groups;

                            if($scope.vm.groups && $scope.vm.groups.length >0){
                                $scope.vm.selectedGroup = $scope.vm.groups[0];
                            }
                            $scope.vm.groupsdataLoading = false;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function getgroup(group, providers) {
            $scope.error = '';
            if (providers != null) {
                var provider_name = '';
                for (var i = 0; i < providers.length; i++) {
                    if (providers[i].domainType == 'SYSTEM_DOMAIN') {
                        provider_name = providers[i].name;
                    }
                }

                $scope.currentgroup = {};
                var upn = group.name + "@" + group.domain;
                GroupService
                    .Get($rootScope.globals.currentUser, upn)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.currentgroup = res.data;
                            $scope.currentgroup.members = {};
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    })
                    .then(function (res) {
                        if (res.status == 200) {
                            if ($scope.currentgroup) {
                                GroupService
                                    .GetMembership($rootScope.globals.currentUser, upn, "USER")
                                    .then(function (res) {
                                        if (res.status == 200) {
                                            $scope.currentgroup.members.users = res.data.users;
                                        }
                                        else {
                                            $rootScope.globals.errors = res.data;
                                        }
                                    });
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    })
                    .then(function (res) {
                        if (res.status == 200) {
                            if ($scope.currentgroup) {
                                GroupService
                                    .GetMembership($rootScope.globals.currentUser, upn, "SOLUTIONUSER")
                                    .then(function (res) {
                                        if (res.status == 200) {
                                            $scope.currentgroup.members.solutionusers = res.data.solutionUsers;
                                        }
                                        else {
                                            $rootScope.globals.errors = res.data;
                                        }
                                    });
                            }
                            else {
                                $rootScope.globals.errors = res.data;
                            }
                        }
                    })
                    .then(function (res) {
                        if (res.status == 200) {
                            if ($scope.currentgroup) {
                                GroupService
                                    .GetMembership($rootScope.globals.currentUser, upn, "GROUP")
                                    .then(function (res) {
                                        if (res.status == 200) {
                                            $scope.currentgroup.members.groups = res.data.groups;
                                        }
                                        else {
                                            $rootScope.globals.errors = res.data;
                                        }
                                    });
                            }
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }

                    });
            }
        }

        function addGroup() {
            var template = 'sso/usersandgroups/group/group.add.html';
            var controller = 'GroupCntrl';
            popupUtil.open($scope, template, controller);
        }

        function deleteGroup(group) {

            if(group) {
                $scope.error = '';
                var upn = group.name + "@" + group.domain;
                GroupService
                    .Delete($rootScope.globals.currentUser, upn)
                    .then(function (res) {
                        if (res.status == 200 || res.status == 204) {
                            $rootScope.globals.errors = {
                                details: 'Group ' + upn + ' deleted successfully',
                                success: true
                            };
                            $scope.vm.selectedGroup = null;
                            getgroups($scope.vm.identitysources, $scope.vm.groupsearch);
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function getsolutionusers(providers, name, type) {
            $scope.error = '';
            $scope.vm.solutionusersdataLoading = true;
            $scope.currentTab = 1;
            $rootScope.globals.tabs.usersAndGroups = $scope.currentTab;
            $scope.vm.selectedSolutionUser = null;

            var value = "NAME";
            /*if(!type){
                var item = {name: "Name", value: "NAME"};
                $scope.vm.selectedSolutionUserSearchType = item;
                $scope.vm.solutionUserSearchType = [item, {name: "Certificate", value: "CERT_SUBJECTDN"}]
            }

            if(name && name != '' && type){
                value = type.value;
            }*/
            if (providers != null) {
                var provider_name = '';
                for (var i = 0; i < providers.length; i++) {
                    if (providers[i].domainType == 'SYSTEM_DOMAIN') {
                        provider_name = providers[i].name;
                    }
                }
                $scope.currentsolutionuser = {};
                MemberService
                    .Search($rootScope.globals.currentUser, provider_name, "SOLUTIONUSER", value , name)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.vm.solutionusers = res.data.solutionUsers;

                            if($scope.vm.solutionusers && $scope.vm.solutionusers.length > 0) {
                                $scope.vm.selectedSolutionUser = $scope.vm.solutionusers[0];
                            }

                            if ($scope.vm.solutionusers) {
                                for (var i = 0; i < $scope.vm.solutionusers.length; i++) {
                                    $scope.vm.solutionusers[i].cert = Util.getCertificateDetails($scope.vm.solutionusers[i].certificate.encoded);
                                }
                            }
                            $scope.vm.solutionusersdataLoading = false;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function getsolutionuser(solutionuser) {
            $scope.error = '';
            $scope.currentsolutionuser = {};
            SolutionUserService
                .Get($rootScope.globals.currentUser, solutionuser.name)
                .then(function (res) {
                    if (res.status == 200) {
                        $scope.currentsolutionuser = res.data;
                        $scope.currentsolutionuser.cert = Util.getCertificateDetails(res.data.certificate.encoded);
                    }
                    else {
                        $rootScope.globals.errors = res.data;
                    }
                });
        }

        function deleteSolutionUser(solutionuser) {
            $scope.error = '';

            if(solutionuser) {
                SolutionUserService
                    .Delete($rootScope.globals.currentUser, solutionuser.name)
                    .then(function (res) {
                        if (res.status == 200 || res.status == 204) {
                            $rootScope.globals.errors = {
                                details: 'Solution User ' + solutionuser.upn + ' deleted successfully',
                                success: true
                            };
                            $scope.vm.selectedSolutionUser = null;
                            getsolutionusers($scope.vm.identitysources, $scope.vm.solutionusersearch);
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function refresh(provider) {
            $scope.error = '';
            if (provider != undefined) {
                if ($scope.currentTab == 0) {
                    getusers(provider, $scope.vm.search);

                } else if ($scope.currentTab == 1) {
                    getsolutionusers($scope.vm.identitysources, $scope.vm.solutionusersearch);

                } else if ($scope.currentTab == 2) {
                    getgroups($scope.vm.identitysources, $scope.vm.groupsearch);
                }
            }
        }

        function getusergroups(user, provider) {
            $scope.error = '';
            if (provider != undefined) {
                $scope.currentuser.groups = [];
                var upn = user.name + '@' + user.domain;
                UserService
                    .GetGroups($rootScope.globals.currentUser, upn)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.currentuser.groups = res.data;
                        }
                        else {
                            $rootScope.globals.errors = res.data;
                        }
                    });
            }
        }

        function isuserguest(user) {
            return !user || !user.role ||
                user.role != 'Administrators@' + user.domain ||
                user.role != 'Users@' + user.domain;
        }

        function isuserregularuser(user) {
            return user &&
                user.role &&
                user.role === 'Users@' + user.domain;
        }

        function isuseradmin(user) {
            return user &&
                user.role &&
                user.role === 'Administrators@' + user.domain;
        }

        function previewcertificate(solutionuser, contents) {
            if (!solutionuser.certificate) {
                solutionuser.certificate = {};
            }
            solutionuser.certificate.encoded = contents;
        };
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/usersandgroups', {
            templateUrl: 'sso/usersandgroups/usersandgroups.view.html',
            controller: 'UsersAndGroupsCntrl'
        })
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.components');
module.factory('AuthenticationService', AuthenticationService);

AuthenticationService.$inject = ['$window', '$rootScope'];

function AuthenticationService($window, $rootScope) {

    var service = {};
    service.logout = logout;
    service.redirectToHome = redirectToHome;
    return service;

    function logout() {
        var logoutUri = "/lightwaveui/Logout?id_token="
            + $rootScope.globals.currentUser.token.id_token
            + "&state="
            + $rootScope.globals.currentUser.token.state
            + "&tenant="
            + $rootScope.globals.currentUser.tenant;
        $window.sessionStorage.currentUser = 'logout';
        $window.location.href = logoutUri;
    }

    function redirectToHome() {
        var homeUri = "/lightwaveui";
        $window.sessionStorage.currentUser = 'logout';
        $window.location.href = homeUri;
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.components');
module.controller('NavigationCntrl', [ '$scope', '$rootScope', '$location',
        function($scope, $rootScope, $location) {
            $scope.vm = this;
            $scope.vm.select = select;
            $scope.vm.getItemStyle = getItemStyle;
            $scope.vm.canShow = canShow;
            $scope.vm.exists = exists;
            $scope.vm.tenantCheck = tenantCheck;
            init();

            function init() {

                var absUrl = $location.absUrl();
                var uris = absUrl.split('/');
                var lastUri = uris[uris.length - 1];
                var part = lastUri.split('?')[0];

                $scope.vm.menus = [
                    {
                        name: "Single Sign-On",
                        image: "sso.png",
                        header: true,
                        href: "#ssohome",
                        selected: true,
                        roles: ['Administrator', 'RegularUser','GuestUser'],
                        tenantType: 'All'
                    },
                    {
                        name: "Users & Groups",
                        image: "group.png",
                        header: false,
                        href: "#usersandgroups",
                        roles: ['Administrator', 'RegularUser'],
                        tenantType: 'All'
                    },
                    {
                        name: "Identity Sources",
                        image: "tenant.png",
                        header: false,
                        href: "#identitysources",
                        roles: ['Administrator', 'RegularUser'],
                        tenantType: 'All'
                    },
                    {
                        name: "Service Providers",
                        image: "serviceprovider.png",
                        header: false,
                        href: "#serviceproviders",
                        roles: ['Administrator'],
                        tenantType: 'All'
                    },
                    {
                        name: "Certificates",
                        image: "certificate.png",
                        header: false,
                        href: "#ssocertificate",
                        roles: ['Administrator', 'RegularUser', 'GuestUser'],
                        tenantType: 'All'
                    },
                    {
                        name: "Policies & Configuration",
                        image: "configuration.png",
                        header: false,
                        href: "#ssopolicies",
                        roles: ['Administrator', 'RegularUser'],
                        tenantType: 'System'
                    },
                    {
                        name: "Tenants",
                        image: "computer.png",
                        header: false,
                        href: "#ssoservermgmt",
                        roles: ['Administrator'],
                        tenantType: 'All'
                    }
                ];

                for (var i=0; i<$scope.vm.menus.length; i++) {
                    $scope.vm.menus[i].selected = ($scope.vm.menus[i].href == ('#' + part));
                }
            }

            function exists(roles, role){

                var contains = false;
                for(var i=0;i<roles.length;i++){
                    if(roles[i] == role){
                        contains = true;
                        break;
                    }
                }
                return contains;
            }

            function tenantCheck(tenantType, isSystemTenant){
                return (tenantType == "All" ||
                       (tenantType == "System" && isSystemTenant));
            }

            function canShow(menu, context){

                if(context) {
                    var roleCheck = $scope.vm.exists(menu.roles, context.role);
                    var tenantCheck = $scope.vm.tenantCheck(menu.tenantType, context.isSystemTenant);
                    return roleCheck && tenantCheck;
                }
                return false;
            }

            function select(menu){
                for (var i=0; i<$scope.vm.menus.length; i++) {
                    $scope.vm.menus[i].selected = false;
                }
                menu.selected = true;
            }

            function getItemStyle(menu){
                var style = 'navigation-item';
                var selected = menu.selected ? '-selected' : '';
                var header = menu.header ? '-header' : '';
                return style + header + selected;
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.components');
module.controller('ProfileCntrl', [ '$scope', 'popupUtil', 'AuthenticationService',
    function($scope, popupUtil, AuthenticationService) {
        $scope.vm = this;
        $scope.vm.changePassword = changePassword;
        $scope.vm.logout = AuthenticationService.logout;
        $scope.vm.showProfile = showProfile;
        $scope.vm.hideProfile = hideProfile;

        init();

        function init(){
            $scope.vm.profileState = false;
        }

        function hideProfile(){
            $scope.vm.profileState = false;
        }

        function showProfile(){
            $scope.vm.profileState = true;
        }

        function changePassword() {
            var template = 'shared/components/password/password.change.html';
            var controller = 'PasswordCntrl';
            popupUtil.open($scope, template, controller);
        }

    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.utils');
module.factory('certUtil', certUtil);

certUtil.$inject = ['dateUtil', 'popupUtil'];

function certUtil(dateUtil, popupUtil) {

    var util = {};
    util.getCertificateDetails = getCertificateDetails;
    util.extractBase64Encoded = extractBase64Encoded;
    util.decodeJWT = decodeJWT;
    util.viewCertificate = viewCertificate;
    util.isValidBase64 = isValidBase64;
    return util;

    function checkexpired(before){

        var beforeDate = new Date(before);
        var currentDate = new Date();
        return beforeDate.getTime() < currentDate.getTime();
    }

    function getCertificateDetails(pem) {

        var issuer='', subject= '', after = '', expired = '', before = '';

        try {

            var c = new X509();
            c.readCertPEM(pem);
            issuer = c.getIssuerString();
            issuer = issuer.replace('undefined', 'DC');
            issuer = reverse(issuer, '/');
            subject = c.getSubjectString();
            subject = subject.replace('undefined', 'DC');
            subject = reverse(subject, '/');
            after = c.getNotAfter();
            expired = checkexpired(after);
            after = dateUtil.toDate(after);
            before = c.getNotBefore();
            before = dateUtil.toDate(before);
        }
        catch(e)
        {

        }
        return {
            "issuer" : issuer,
            "subject" : subject ,
            "after" : after,
            "before" : before,
            "expired": expired
        };
    }

    function reverse(text, delimiter)
    {
        var splitText = text.split(delimiter);
        var reversedText = '';

        for(var i=0;i<splitText.length;i++){
            reversedText = reversedText + splitText[splitText.length-1-i] + '/';
        }

        if(splitText.length > 1){
            reversedText = reversedText.substring(0, reversedText.length - 2);
        }

        return reversedText;
    }

    function extractBase64Encoded(pKey){
        var beginRSA = "-----BEGIN RSA PRIVATE KEY-----";
        var endRSA = "-----END RSA PRIVATE KEY-----";
        var begin = "-----BEGIN PRIVATE KEY-----";
        var end = "-----END PRIVATE KEY-----";
        pKey = pKey.replace(begin, '');
        pKey = pKey.replace(end, '');
        pKey = pKey.replace(beginRSA, '');
        pKey = pKey.replace(endRSA, '');
        return pKey;
    }

    function decodeJWT(jwt) {
        var sJWS = jwt;

        var components = sJWS.split(".");
        var uHeader = b64utos(components[1]).toString();

        var decodedJWT =
        {
            header: JSON.parse(uHeader)
            //claims: JSON.parse(uClaim)
        };

        return decodedJWT;
    }

    function viewCertificate(scope, encoded, template, controller){

            scope.metadata  = getCertificateDetails(encoded);
            popupUtil.open(scope, template, controller);
    }

    function isValidBase64(str){
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.utils');
module.factory('dateUtil', dateUtil);

function dateUtil() {

    var util = {};
    util.unixToDateText = unixToDateText;
    util.numberToTime = numberToTime;
    util.toDate = toDate;
    return util;

    function unixToDateText(UNIX_timestamp) {
        var a = new Date(UNIX_timestamp * 1000);

        if (!isNaN(a.getTime())) {
            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            var year = a.getFullYear();
            var month = months[a.getMonth()];
            var date = a.getDate();
            var hour = a.getHours();
            var min = a.getMinutes();
            var sec = a.getSeconds();
            var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;
            return time;
        }
        return '';
    }

    function numberToTime(a) {
        var hours = Math.trunc(a / 3600);
        var days = Math.trunc(hours / 24);
        hours = hours % 24;
        var minutes = a % 3600;
        return days + " days " + hours + " hours " + minutes + " minutes";
    }


    function toDate(dateString) {
        var yy = dateString.substring(0,2);
        var mm = dateString.substring(2,4);
        var dd = dateString.substring(4,6);
        var hh = dateString.substring(6,8);
        var mn = dateString.substring(8,10);
        var ss = dateString.substring(10,12);
        var ampm = '';
        if(hh > 12) {
            ampm = 'PM';
            hh = hh - 12;
        }
        else {
            ampm = 'AM';
        }
        return mm + "/" + dd + "/" + yy + " " + hh + ":" + mn + " " + ampm;
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.utils');
module.factory('numberUtil', numberUtil);

function numberUtil() {

    var util = {};
    util.isInteger = isInteger;
    return util;

    function isInteger(value) {
        if (isNaN(value)) {
            return false;
        }
        var x = parseFloat(value);
        return (x | 0) === x;
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.utils');
module.factory('popupUtil', popupUtil);

popupUtil.$inject = ['ngDialog'];

function popupUtil(ngDialog) {

    var util = {};
    util.open = openPopup;
    return util;

    function openPopup(scope, template, controller){
        ngDialog.open({
            template: template,
            controller: controller,
            className: 'ngdialog-theme-default ngdialog-background-clear popup-style',
            scope: scope,
            width: '50%'
        });
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.utils');
module.factory('Util', Util);

Util.$inject = ['dateUtil', 'certUtil', 'numberUtil'];

function Util(dateUtil, certUtil, numberUtil) {

    var util = {};
    util.unixToDateText = dateUtil.unixToDateText;
    util.numberToTime = dateUtil.numberToTime;
    util.getCertificateDetails = certUtil.getCertificateDetails;
    util.extractBase64Encoded = certUtil.extractBase64Encoded;
    util.decodeJWT = certUtil.decodeJWT;
    util.viewCertificate = certUtil.viewCertificate;
    util.isValidBase64 = certUtil.isValidBase64;
    util.isInteger = numberUtil.isInteger;
    return util;
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.directives');
module.directive('ngConfirmClick', [confirmDirective]);

function confirmDirective(){
    return {
        link: function (scope, element, attr) {
            var msg = attr.ngConfirmClick || "Are you sure?";
            var clickAction = attr.confirmedClick;
            element.bind('click',function (event) {
                if ( window.confirm(msg) ) {
                    scope.$eval(clickAction)
                }
            });
        }
    };
}

/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.directives');
module.directive('onReadFile', fileReaderDirective);

function fileReaderDirective($parse) {
    return {
        require:'ngModel',
        restrict: 'A',
        scope : false,
        link: function(scope, element, attrs, ngModel) {
            element.bind('change', function(e) {
                ngModel.$setViewValue(element.val());
                ngModel.$render();
                var onFileReadFn = $parse(attrs.onReadFile);
                var reader = new FileReader();
                reader.onload = function() {
                    var fileContents = reader.result;
                    scope.$apply(function() {
                        if(fileContents != null && fileContents != undefined) {
                            onFileReadFn(scope, {
                                'contents': fileContents
                            });
                        }
                    });
                };

                if(element[0].files != null && element[0].files.length > 0) {
                    reader.readAsText(element[0].files[0]);
                }
            });
        }
    };
}

/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('IdentitySourceCntrl', ['$scope',  '$rootScope', 'popupUtil', 'IdentitySourceService', 'TenantService', 'Util',
        function($scope, $rootScope, popupUtil, IdentitySourceService, TenantService, Util) {

                $scope.vm.viewCertificate = viewCertificate;
                $scope.vm.isSecure = isSecure;
                $scope.vm.isNewSecure = isNewSecure;
                $scope.vm.showBasicTab = showBasicTab;
                $scope.vm.showCertificateTab = showCertificateTab;
                $scope.vm.showCredentialsTab = showCredentialsTab;
                $scope.vm.showSummaryTab = showSummaryTab;
                $scope.vm.addCertificate = addCertificate;
                $scope.vm.addNewCertificate = addNewCertificate;
                $scope.vm.updateIdentitySource = updateIdentitySource;
                $scope.vm.showPreviousTab = showPreviousTab;
                $scope.vm.showNextTab = showNextTab;
                $scope.vm.removeCertificate = removeCertificate;
                $scope.vm.testConnection = testConnection;
                $scope.vm.setIdentitySourceType = setIdentitySourceType;
                $scope.vm.addIdentitySource = addIdentitySource;
                $scope.vm.canShowPreviousTab = canShowPreviousTab;
                $scope.vm.isValid = isValid;

                init();

                function init() {
                        $rootScope.globals.errors = null;
                        $rootScope.globals.popup_errors = null;
                        $scope.vm.idsTab = $scope.vm.isNew ? 0 : 1;
                        $scope.vm.testConnectionStatus = null;
                        $scope.vm.isTestingConnection = false;

                        if($scope.vm.newIdentitySource) {
                                $scope.vm.newIdentitySource.type = 'IDENTITY_STORE_TYPE_LDAP_WITH_AD_MAPPING';
                        }
                }

                function isValid() {
                        $rootScope.globals.popup_errors = null;
                        var ids = null;
                        if ($scope.vm.newIdentitySource) {
                                ids = $scope.vm.newIdentitySource;
                        }
                        else {
                                ids = $scope.vm.selectedIdentitysource;
                        }
                        if($scope.vm.idsTab == 1){

                                if(ids.name && ids.friendlyName && ids.alias && ids.userBaseDN &&  ids.groupBaseDN && ids.connectionStrings)
                                {
                                        if(ids.connectionStrings &&
                                            ids.connectionStrings.length > 0) {
                                                var conn = ids.connectionStrings[0];
                                                if (conn.indexOf("ldap:") != 0 && conn.indexOf("ldaps:") != 0) {
                                                        $rootScope.globals.popup_errors =
                                                        { details : "Invalid Format : Primary connection should be of form - ldap(s)://<hostname>:<port>" };
                                                        return false;
                                                }
                                                else {
                                                        var parts = conn.split(":");

                                                        if(parts.length != 3 || parts[1].trim() == '' || !Util.isInteger(parts[2])){

                                                                $rootScope.globals.popup_errors =
                                                                { details : "Invalid Format : Primary connection should be of form - ldap(s)://<hostname>:<port>" };
                                                                return false;
                                                        }
                                                        else {
                                                                if (ids.connectionStrings.length > 1 && ids.connectionStrings[1])
                                                                {
                                                                        if(ids.connectionStrings[1] != '' &&
                                                                            ids.connectionStrings[1].indexOf("ldap:") != 0 &&
                                                                            ids.connectionStrings[1].indexOf("ldaps:") != 0) {
                                                                                $rootScope.globals.popup_errors =
                                                                                        { details : "Invalid Format : Secondary connection should be of form - ldap(s)://<hostname>:<port>" };
                                                                                return false;
                                                                        }
                                                                        else {
                                                                                var conn2 = ids.connectionStrings[1];
                                                                                var parts2 = conn2.split(":");

                                                                                if(parts2.length != 3 || parts2[1].trim() == '' || !Util.isInteger(parts2[2])) {

                                                                                        $rootScope.globals.popup_errors =
                                                                                        { details : "Invalid Format : Secondary connection should be of form - ldap(s)://<hostname>:<port>" };
                                                                                        return false;
                                                                                }
                                                                        }
                                                                }
                                                        }
                                                }
                                        }
                                        else {
                                                return false;
                                        }
                                }
                                else {
                                        return false;
                                }
                        }
                        else if($scope.vm.idsTab == 3) {
                                return ids.username && ids.password;
                        } else if($scope.vm.idsTab == 2) {
                                return ids.certificates && ids.certificates.length > 0;
                        }

                        return true;
                }

                function setIdentitySourceType(type){

                        if(type == 1){
                                $scope.vm.newIdentitySource.type = 'IDENTITY_STORE_TYPE_LDAP_WITH_AD_MAPPING';
                        }
                        else if(type == 2) {
                                $scope.vm.newIdentitySource.type = 'IDENTITY_STORE_TYPE_LDAP';
                        }
                }
                function viewCertificate(certificate) {

                        if (certificate) {
                                var template = 'shared/components/certificate/certificate.view.html';
                                var controller = 'CertificateViewerCntrl';
                                Util.viewCertificate($scope, certificate.encoded, template, controller);
                        }
                }

                function isSecure() {
                        return $scope.vm.selectedIdentitysource &&
                            $scope.vm.selectedIdentitysource.connectionStrings &&
                            (($scope.vm.selectedIdentitysource.connectionStrings.length > 0
                            && $scope.vm.selectedIdentitysource.connectionStrings[0] != null
                            && $scope.vm.selectedIdentitysource.connectionStrings[0].indexOf("ldaps") > -1) ||
                            ($scope.vm.selectedIdentitysource.connectionStrings.length > 1
                            && $scope.vm.selectedIdentitysource.connectionStrings[1] != null
                            && $scope.vm.selectedIdentitysource.connectionStrings[1].indexOf("ldaps") > -1));
                }

                function isNewSecure() {
                        return $scope.vm.newIdentitySource &&
                            $scope.vm.newIdentitySource.connectionStrings &&
                            (($scope.vm.newIdentitySource.connectionStrings.length > 0
                            && $scope.vm.newIdentitySource.connectionStrings[0]!= null
                            && $scope.vm.newIdentitySource.connectionStrings[0].indexOf("ldaps") > -1) ||
                            ($scope.vm.newIdentitySource.connectionStrings.length > 1
                            && $scope.vm.newIdentitySource.connectionStrings[1] != null
                            && $scope.vm.newIdentitySource.connectionStrings[1].indexOf("ldaps") > -1));
                }

                function showBasicTab() {
                        $scope.vm.idsTab = 1;
                }

                function showCertificateTab() {
                        $scope.vm.idsTab = 2;
                }

                function showCredentialsTab() {
                        $scope.vm.idsTab = 3;
                }

                function showSummaryTab() {
                        $scope.vm.idsTab = 4;
                }

                function showIdentityChoice(){
                        $scope.vm.idsTab = 0;
                }
                function addCertificate(contents) {
                        if (!$scope.vm.selectedIdentitysource.certificatescertificates) {
                                $scope.vm.selectedIdentitysource.certificates = [];
                        }

                        var metadata = Util.getCertificateDetails(contents);
                        var certificate = {
                                encoded: contents,
                                metadata: metadata
                        };
                        $scope.vm.selectedIdentitysource.certificates.push(certificate);
                }

                function addNewCertificate(contents) {
                        if (!$scope.vm.newIdentitySource.certificates) {
                                $scope.vm.newIdentitySource.certificates = [];
                        }

                        var metadata = Util.getCertificateDetails(contents);
                        var certificate = {
                                encoded: contents,
                                metadata: metadata
                        };
                        $scope.vm.newIdentitySource.certificates.push(certificate);
                }

                function updateIdentitySource(identitySource) {
                        $scope.vm.isSaving = true;
                        $rootScope.globals.errors = null;
                            IdentitySourceService
                            .Update($rootScope.globals.currentUser, identitySource)
                            .then(function (res) {
                                    if (res.status == 200) {
                                            $scope.vm.getIdentitySources();
                                            $scope.closeThisDialog('save');
                                    }
                                    else {
                                            $rootScope.globals.popup_errors = res.data;
                                    }
                                    $scope.vm.isSaving = false;
                            });
                }

                function addIdentitySource(identitySource) {
                        $scope.vm.isSaving = true;
                        $rootScope.globals.errors = null;
                        IdentitySourceService
                            .Add($rootScope.globals.currentUser, identitySource)
                            .then(function (res) {
                                    if (res.status == 200) {
                                            $rootScope.globals.errors = {details: 'Identity Source ' + identitySource.name + ' added successfully', success:true};
                                            $scope.vm.getIdentitySources();
                                            $scope.closeThisDialog('save');
                                    }
                                    else {
                                            $rootScope.globals.popup_errors = res.data;
                                    }
                                    $scope.vm.isSaving = false;
                            });
                }

                function showNextTab(){
                        $scope.vm.testConnectionStatus = null;
                        if($scope.vm.idsTab == 1) {
                                if($scope.vm.isSecure() || $scope.vm.isNewSecure())
                                        $scope.vm.idsTab += 1;
                                else {
                                        if($scope.vm.selectedIdentitysource)
                                                $scope.vm.selectedIdentitysource.certificates = [];
                                        if($scope.vm.newIdentitySource)
                                                $scope.vm.newIdentitySource.certificates = [];
                                        $scope.vm.idsTab += 2;
                                }
                        }
                        else
                        {
                                $scope.vm.idsTab += 1;
                        }
                        showRightPane();
                }

                function showPreviousTab(){
                        $scope.vm.testConnectionStatus = null;
                        if($scope.vm.idsTab == 3){
                                if($scope.vm.isNewSecure() || $scope.vm.isSecure())
                                        $scope.vm.idsTab -= 1;
                                else
                                        $scope.vm.idsTab -= 2;
                        }
                        else
                        {
                                $scope.vm.idsTab -= 1;
                        }
                        showRightPane();
                }

                function canShowPreviousTab(){
                        return (($scope.vm.newIdentitySource && $scope.vm.idsTab > 0) ||
                            (!$scope.vm.newIdentitySource && $scope.vm.idsTab > 0));
                }

                function showRightPane(){

                        if($scope.vm.idsTab == 1){
                                $scope.vm.showBasicTab();
                        } else if($scope.vm.idsTab == 2){
                                $scope.vm.showCertificateTab();
                        } else if($scope.vm.idsTab == 3){
                                $scope.vm.showCredentialsTab();
                        } else if($scope.vm.idsTab == 4){
                                $scope.vm.showSummaryTab();
                        }
                        /*else if($scope.vm.idsTab == 0){
                                $scope.vm.showIdentityChoice();
                        }*/
                }

                function removeCertificate(certificates, certificate){

                        for(var i = 0; i < certificates.length; i++){
                                if(certificates[i].encoded == certificate.encoded){
                                        certificates.splice(i,1);
                                        break;
                                }
                        }
                }

                function testConnection(identitySource){
                        if(identitySource.connectionStrings.length > 1 &&
                            (identitySource.connectionStrings[1] == null ||
                             identitySource.connectionStrings[1].trim() == '')){
                                identitySource.connectionStrings.splice(1,1);
                        }
                        $scope.vm.isTestingConnection = true;
                        $scope.vm.testConnectionStatus = null;
                        identitySource.authenticationType = "PASSWORD";
                        IdentitySourceService
                            .TestConnectivity($rootScope.globals.currentUser, identitySource)
                            .then(function (res) {
                                    if (res.status == 200) {
                                            $scope.vm.testConnectionStatus =
                                            {
                                                    status: "Test Connection successful.",
                                                    success: true,
                                                    css: "success-display"
                                            };
                                    }
                                    else {
                                            var details = res.data.details == undefined ? '' : res.data.details;
                                            var cause = res.data.cause == undefined ? '' : res.data.cause;
                                            $scope.vm.testConnectionStatus =
                                            {
                                                    status: "Test Connection failed. - " + details + ' ' + cause,
                                                    success: false,
                                                    css: "error-display"
                                            };
                                    }
                                    $scope.vm.isTestingConnection = false;
                            });

                }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('AuthenticationPolicyCntrl', [ '$scope', '$rootScope', 'Util', 'TenantService',
        function($scope, $rootScope, Util, TenantService) {

            $scope.updateAuthenticationPolicy = updateAuthenticationPolicy;
            $scope.addPolicyOid = addPolicyOid;
            $scope.removePolicyOid = removePolicyOid;
            $scope.addCertificate = addCertificate;
            $scope.removeCertificate = removeCertificate;

            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
            }

            function addPolicyOid(){

                var certPolicyOIDs = $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.certcertPolicyOIDs;
                if(!certPolicyOIDs)
                {
                    certPolicyOIDs = [];
                }
                var policyOid = $scope.vm.PolicyOID;
                if(policyOid){
                    certPolicyOIDs.push(policyOid);
                }
                $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.certPolicyOIDs = certPolicyOIDs;
            }
            function removePolicyOid(policyOid) {
                var certPolicyOIDs = $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.certPolicyOIDs;
                if(certPolicyOIDs) {
                    for(var i=0; i < certPolicyOIDs.length;i++) {
                        if(certPolicyOIDs[i] == policyOid){
                            certPolicyOIDs.splice(i,1);
                            break;
                        }
                    }
                }
                $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.certPolicyOIDs = certPolicyOIDs;
            }

            function updateAuthenticationPolicy(authenticationPolicy) {
                $rootScope.globals.errors = null;
                var policy = {
                    authenticationPolicy: authenticationPolicy
                };

                TenantService
                    .UpdateConfiguration($rootScope.globals.currentUser, policy)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Authentication policy updated successfully', success:true};
                            $scope.getConfig();
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }

            function addCertificate(certificates, contents) {

                if(!certificates) {
                    certificates = [];
                }

                var metadata = Util.getCertificateDetails(contents);
                var certificate = {
                    encoded : contents,
                    metadata : metadata
                };
                certificates.push(certificate);
                $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.trustedCACertificates = certificates;
            }

            function removeCertificate(certificates, certificate){

                if(certificates) {
                    for(var i=0; i<certificates.length;i++){
                        if(certificates[i].encoded == certificate.encoded) {
                            certificates.splice(i, 1);
                        }
                    }
                    $scope.vm.policies.authenticationPolicy.clientCertificatePolicy.trustedCACertificates = certificates;
                }
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('BannerPolicyCntrl', [ '$scope', '$rootScope', 'TenantService',
        function($scope, $rootScope, TenantService) {

            $scope.updateBannerPolicy = updateBannerPolicy;
            $scope.addContent = addContent;

            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
            }

            function addContent(content){
                $scope.vm.policies.brandPolicy.logonBannerContent = content;
            }

            function updateBannerPolicy(brandPolicy) {
                $rootScope.globals.errors = null;
                var policy = {
                    brandPolicy: brandPolicy
                };

                TenantService
                    .UpdateConfiguration($rootScope.globals.currentUser, policy)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Banner policy updated successfully', success:true};
                            $scope.getConfig();
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('LockoutPolicyCntrl', [ '$scope', '$rootScope', 'TenantService',
        function($scope, $rootScope, TenantService) {

            $scope.updateLockoutPolicy = updateLockoutPolicy;

            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
            }

            function updateLockoutPolicy(lockoutPolicy) {
                $rootScope.globals.errors = null;
                var policy = {
                    lockoutPolicy: lockoutPolicy
                };

                TenantService
                    .UpdateDirConfiguration($rootScope.globals.currentUser, policy)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Lockout policy updated successfully', success:true};
                            $scope.getConfig();
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('PasswordPolicyCntrl', [ '$scope', '$rootScope', 'TenantService',
        function($scope, $rootScope, TenantService) {

            $scope.updatePasswordPolicy = updatePasswordPolicy;

            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
            }

            function updatePasswordPolicy(passwordPolicy) {
                $rootScope.globals.errors = null;
                var policy = {
                    passwordPolicy: passwordPolicy
                };

                TenantService
                    .UpdateDirConfiguration($rootScope.globals.currentUser, policy)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Password policy updated successfully', success:true};
                            $scope.getConfig();
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('TokenPolicyCntrl', [ '$scope', '$rootScope', 'TenantService',
        function($scope, $rootScope, TenantService) {

            $scope.updateTokenPolicy = updateTokenPolicy;

            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
            }

            function updateTokenPolicy(tokenPolicy) {
                $rootScope.globals.errors = null;
                var policy = {
                    tokenPolicy: tokenPolicy
                };

                TenantService
                    .UpdateConfiguration($rootScope.globals.currentUser, policy)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Token policy updated successfully', success: true};
                            $scope.getConfig();
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('IdentityProviderCntrl', [ '$scope', '$rootScope', 'Util', 'popupUtil', 'IdentityProviderService',
        function($scope, $rootScope, Util, popupUtil, IdentityProviderService) {

                $scope.vm.viewCertificate = viewCertificate;
                $scope.vm.setNewCertificate = setNewCertificate;
                $scope.vm.setEditCertificate = setEditCertificate;
                $scope.vm.removeCertificate = removeCertificate;

                $scope.vm.addNameIdFormat = addNameIdFormat;
                $scope.vm.updateNameIdFormat = updateNameIdFormat;
                $scope.vm.removeNameIdFormat = removeNameIdFormat;

                $scope.vm.addSubjectFormat = addSubjectFormat;
                $scope.vm.removeSubjectFormat = removeSubjectFormat;

                $scope.vm.addSso = addSso;
                $scope.vm.removeSso = removeSso;

                $scope.vm.addSlo = addSlo;
                $scope.vm.removeSlo = removeSlo;

                $scope.vm.addIdentityProvider = addIdentityProvider;
                $scope.vm.isValidIdentityProvider = isValidIdentityProvider;

                init();

                function init(){
                        $rootScope.globals.errors = '';
                        $rootScope.globals.popup_errors = null;

                        if($scope.vm.addNewIdentityProvider) {
                                $scope.vm.newIdentityProvider = {};
                        }
                }


                function viewCertificate(certificate){
                        if(certificate) {
                                var template = 'shared/components/certificate/certificate.view.html';
                                var controller = 'CertificateViewerCntrl';
                                Util.viewCertificate($scope, certificate.encoded, template, controller);
                        }
                }

                function setNewCertificate(chain, contents){

                        if(!$scope.vm.newIdentityProvider.signingCertificates) {
                                $scope.vm.newIdentityProvider.signingCertificates = { certificates : []};
                        }

                        if(!$scope.vm.newIdentityProvider.signingCertificates.certificates) {
                                $scope.vm.newIdentityProvider.signingCertificates.certificates = [];
                        }
                        var metadata = Util.getCertificateDetails(contents);
                        var certificate = {
                                encoded: contents,
                                metadata: metadata
                        };
                        $scope.vm.newIdentityProvider.signingCertificates.certificates.push(certificate);
                }

                function setEditCertificate(chain, contents){

                        if(!$scope.vm.selectedIdentityProvider.signingCertificates) {
                                $scope.vm.selectedIdentityProvider.signingCertificates = { certificates : []};
                        }

                        if(!$scope.vm.selectedIdentityProvider.signingCertificates.certificates) {
                                $scope.vm.selectedIdentityProvider.signingCertificates.certificates = [];
                        }
                        var metadata = Util.getCertificateDetails(contents);
                        var certificate = {
                                encoded: contents,
                                metadata: metadata
                        };
                        $scope.vm.selectedIdentityProvider.signingCertificates.certificates.push(certificate);
                }

                function removeCertificate(chain, certificate){

                        for (var i = 0; i < chain.length; i++) {
                                if (chain[i].encoded == certificate.encoded) {
                                        chain.splice(i,1);
                                        break;
                                }
                        }
                }

                function addNameIdFormat(format){

                        if(format){

                                if(!$scope.vm.newIdentityProvider.nameIDFormats){
                                        $scope.vm.newIdentityProvider.nameIDFormats = [];
                                }
                                $scope.vm.newIdentityProvider.nameIDFormats.push(format);
                                $scope.vm.nameIDFormat = '';
                        }
                }

                function updateNameIdFormat(format){
                        if(format){
                                if(!$scope.vm.selectedIdentityProvider.nameIDFormats){
                                        $scope.vm.selectedIdentityProvider.nameIDFormats = [];
                                }
                                $scope.vm.selectedIdentityProvider.nameIDFormats.push(format);
                                $scope.vm.selectedNameIDFormat = '';
                        }
                }

                function removeNameIdFormat(formats, format){

                        if(formats && format){

                                for(var i=0;i<formats.length; i++) {
                                        if(formats[i] == format){
                                                formats.splice(i, 1);
                                        }
                                }
                        }
                }

                function addSubjectFormat() {
                        $rootScope.globals.popup_errors = null;
                        var template = 'sso/serviceproviders/identityprovider/subjectFormat/subjectFormat.add.html';
                        var controller = 'SubjectFormatCntrl';
                        popupUtil.open($scope, template, controller);
                }

                function removeSubjectFormat(formats, key){

                        if(formats && key) {
                                delete formats[key];
                        }
                }

                function addSso(){
                        $rootScope.globals.errors = '';
                        $rootScope.globals.popup_errors = null;
                        var template = 'sso/serviceproviders/identityprovider/ssoService/ssoService.add.html';
                        var controller = 'SsoServiceCntrl';
                        popupUtil.open($scope, template, controller);
                }

                function removeSso(ssos, sso){

                        if(ssos && sso) {

                                for(var i=0;i<ssos.length; i++) {
                                        if(ssos[i].name == sso.name){
                                                ssos.splice(i, 1);
                                        }
                                }
                        }
                }

                function addSlo(){
                        $rootScope.globals.popup_errors = null;
                        var template = 'sso/serviceproviders/identityprovider/sloService/sloService.add.html';
                        var controller = 'SloServiceCntrl';
                        popupUtil.open($scope, template, controller);
                }

                function removeSlo(slos, slo){

                        if(slos && slo) {

                                for(var i=0;i<slos.length; i++) {
                                        if(slos[i].name == slo.name){
                                                slos.splice(i, 1);
                                        }
                                }
                        }
                }

                function addIdentityProvider(idp){

                        $rootScope.globals.errors = '';
                        IdentityProviderService
                            .Create($rootScope.globals.currentUser, idp)
                            .then(function (res) {
                                    if (res.status == 200) {
                                            $rootScope.globals.errors = {details: 'Identity Provider updated successfully', success:true};
                                            $scope.vm.selectedIdentityProvider = null;
                                            $scope.vm.newIdentityProvider = null;
                                            $scope.vm.getallidentityprovider();
                                            $scope.closeThisDialog('save');
                                    }
                                    else {
                                            $rootScope.globals.popup_errors = res.data;
                                    }
                            });
                }

                function isValidIdentityProvider(idp){
                        return (idp &&
                                idp.entityID && idp.subjectFormats && idp.alias &&
                                idp.nameIDFormats && idp.nameIDFormats.length > 0 &&
                                idp.signingCertificates && idp.signingCertificates.certificates && idp.signingCertificates.certificates.length > 0 &&
                                idp.sloServices && idp.sloServices.length > 0 &&
                                idp.ssoServices && idp.ssoServices.length > 0);
                }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('OidcClientCntrl', [ '$scope', '$rootScope', 'OidcClientService',
        function($scope, $rootScope, OidcClientService) {

                $scope.vm.addRedirectEditUri = addRedirectEditUri;
                $scope.vm.addRedirectAddUri = addRedirectAddUri;
                $scope.vm.addPRedirectEditUri = addPRedirectEditUri;
                $scope.vm.addPRedirectAddUri = addPRedirectAddUri;
                $scope.vm.removeUri = removeUri;
                $scope.vm.saveOidcClient = saveOidcClient;
                $scope.vm.updateOidcClient = updateOidcClient;
                $scope.vm.isValidOidcClient = isValidOidcClient;

                init();

                function init() {
                        $rootScope.globals.errors = '';
                        $rootScope.globals.popup_errors = null;

                        $scope.vm.newOIDCClient = {
                                oidcclientMetadataDTO : {
                                        tokenEndpointAuthMethod : "none"
                        }};
                }

                function saveOidcClient(oidc){
                        $rootScope.globals.errors = '';
                        OidcClientService
                            .Add($rootScope.globals.currentUser, oidc.oidcclientMetadataDTO)
                            .then(function (res) {
                                    if (res.status == 200) {
                                            $rootScope.globals.errors = {details: 'OIDC Client added successfully', success:true};
                                            $scope.newOIDCClient = {};
                                            $scope.vm.getalloidcclient();
                                            $scope.closeThisDialog('save');
                                    }
                                    else {
                                            $rootScope.globals.popup_errors = res.data;
                                    }
                            });
                }

                function updateOidcClient(oidc){
                        $rootScope.globals.errors = '';
                        OidcClientService
                            .Update($rootScope.globals.currentUser, oidc)
                            .then(function (res) {
                                    if (res.status == 200) {
                                            $rootScope.globals.errors = {details: 'OIDC Client ' + oidc.clientId + ' updated successfully', success:true};
                                            $scope.selectedOIDCClient = null;
                                            $scope.vm.getalloidcclient();
                                            $scope.closeThisDialog('save');
                                    }
                                    else {
                                            $rootScope.globals.popup_errors = res.data;
                                    }
                            });
                }

                function removeUri(uris, uri) {

                        if(uris && uri){
                                for(var i=0;i<uris.length; i++){
                                        if(uris[i] == uri){
                                                uris.splice(i, 1);
                                        }

                                }
                        }
                }

                function addPRedirectEditUri(uri) {

                        if(!$scope.vm.selectedOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUris)
                        {
                                $scope.vm.selectedOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUris = [];
                        }
                        if(uri && isValidUri(uri)) {
                                $scope.vm.selectedOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUris.push(uri);
                                $scope.vm.selectedOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUri = '';
                        }
                }
                function addPRedirectAddUri(uri) {

                        if(!$scope.vm.newOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUris)
                        {
                                $scope.vm.newOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUris = [];
                        }
                        if(uri && isValidUri(uri)) {
                                $scope.vm.newOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUris.push(uri);
                                $scope.vm.newOIDCClient.oidcclientMetadataDTO.postLogoutRedirectUri = '';
                        }
                }
                function addRedirectEditUri(uri) {

                        if(!$scope.vm.selectedOIDCClient.oidcclientMetadataDTO.redirectUris)
                        {
                                $scope.vm.selectedOIDCClient.oidcclientMetadataDTO.redirectUris = [];
                        }
                        if(uri && isValidUri(uri)) {
                                $scope.vm.selectedOIDCClient.oidcclientMetadataDTO.redirectUris.push(uri);
                                $scope.vm.selectedOIDCClient.oidcclientMetadataDTO.redirectUri = '';
                        }
                }
                function addRedirectAddUri(uri) {

                        if(!$scope.vm.newOIDCClient.oidcclientMetadataDTO.redirectUris)
                        {
                                $scope.vm.newOIDCClient.oidcclientMetadataDTO.redirectUris = [];
                        }
                        if(uri && isValidUri(uri)) {
                                $scope.vm.newOIDCClient.oidcclientMetadataDTO.redirectUris.push(uri);
                                $scope.vm.newOIDCClient.oidcclientMetadataDTO.redirectUri = '';
                        }
                }

                function isValidUri(uri) {

                        if(uri) {
                                var str = uri.toString();
                                if (str.indexOf('https://') != 0) {
                                        $rootScope.globals.popup_errors = {details: 'URI should start with https://'};
                                        return false;
                                }
                                if (str.length < 9) {
                                        $rootScope.globals.popup_errors = {details: 'Invalid URI'};
                                        return false;
                                }
                        }
                        return true;
                }

                function isValidOidcClient(oidcClient) {

                        if(oidcClient && oidcClient.oidcclientMetadataDTO) {
                                if (oidcClient.oidcclientMetadataDTO.tokenEndpointAuthMethod == 'private_key_jwt'
                                    && !oidcClient.oidcclientMetadataDTO.certSubjectDN) {
                                        $rootScope.globals.popup_errors = {details: 'No subject DN provided for Private Key JWT token method.'};
                                        return false;
                                }

                                if (oidcClient.oidcclientMetadataDTO.logoutUri && oidcClient.oidcclientMetadataDTO.logoutUri.toString().toLowerCase().indexOf('https://') != 0) {
                                        $rootScope.globals.popup_errors = {details: 'Logout URI should start with https://'};
                                        return false;
                                }


                                return oidcClient.oidcclientMetadataDTO.tokenEndpointAuthMethod &&
                                    oidcClient.oidcclientMetadataDTO.logoutUri &&
                                    oidcClient.oidcclientMetadataDTO.postLogoutRedirectUris &&
                                    oidcClient.oidcclientMetadataDTO.postLogoutRedirectUris.length > 0 &&
                                    oidcClient.oidcclientMetadataDTO.redirectUris &&
                                    oidcClient.oidcclientMetadataDTO.redirectUris.length > 0;
                        }
                        return false;
                }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('RelyingPartyCntrl', [ '$scope', '$rootScope', 'Util', 'popupUtil', 'RelyingPartyService',
        function($scope, $rootScope, Util, popupUtil, RelyingPartyService) {

            $scope.vm.viewCertificate = viewCertificate;
            $scope.vm.setAddCertificate = setAddCertificate;
            $scope.vm.setEditCertificate = setEditCertificate;
            $scope.vm.removeCertificate = removeCertificate;

            $scope.vm.addSignatureAlgorithm = addSignatureAlgorithm;
            $scope.vm.editSignatureAlgorithm = editSignatureAlgorithm;
            $scope.vm.removeSignatureAlgorithm = removeSignatureAlgorithm;

            $scope.vm.viewSlo = viewSlo;
            $scope.vm.addSlo = addSlo;
            $scope.vm.editSlo = editSlo;
            $scope.vm.removeSlo = removeSlo;

            $scope.vm.viewAttributeConsumerServices = viewAttributeConsumerServices;
            $scope.vm.addAttributeConsumerService = addAttributeConsumerService;
            $scope.vm.editAttributeConsumerService = editAttributeConsumerService;
            $scope.vm.removeAttributeConsumerService = removeAttributeConsumerService;

            $scope.vm.viewAssertionConsumerServices = viewAssertionConsumerServices;
            $scope.vm.addAssertionConsumerService = addAssertionConsumerService;
            $scope.vm.editAssertionConsumerService = editAssertionConsumerService;
            $scope.vm.removeAssertionConsumerService = removeAssertionConsumerService;

            $scope.vm.saveRelyingParty = saveRelyingParty;
            $scope.vm.updateRelyingParty = updateRelyingParty;
            $scope.vm.isValidRelyingParty = isValidRelyingParty;

            init();

            function init(){
                $rootScope.globals.errors = '';
                $rootScope.globals.popup_errors = null;
                $scope.vm.newRelyingParty = {};

                if($scope.vm.selectedRelyingParty && $scope.vm.selectedRelyingParty.certificate)
                $scope.vm.selectedRelyingParty.certificate.isValid = true;
            }

            function setAddCertificate(rp, contents){

                var metadata = Util.getCertificateDetails(contents);
                $scope.vm.newRelyingParty.certificate = {
                    encoded: contents,
                    metadata: metadata
                };

                if($scope.vm.newRelyingParty.certificate.metadata.subject != "DC=" &&
                    $scope.vm.newRelyingParty.certificate.metadata.subject.indexOf('undefined') == -1)
                {
                    $scope.vm.newRelyingParty.certificate.isValid = true;
                }
                else {
                    $scope.vm.newRelyingParty.certificate.isValid = false;
                }
            }

            function setEditCertificate(rp, contents){

                var metadata = Util.getCertificateDetails(contents);
                $scope.vm.selectedRelyingParty.certificate = {
                    encoded: contents,
                    metadata: metadata
                };
                if($scope.vm.selectedRelyingParty.certificate.metadata.subject != "DC=" &&
                    $scope.vm.selectedRelyingParty.certificate.metadata.subject.indexOf('undefined') == -1)
                {
                    $scope.vm.selectedRelyingParty.certificate.isValid = true;
                }
                else {
                    $scope.vm.selectedRelyingParty.certificate.isValid = false;
                }
            }

            function removeCertificate(rp) {

                rp.certificate = null
            }

            function addSignatureAlgorithm() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = true;
                var template = 'sso/serviceproviders/relyingparty/signatureAlgorithm/signatureAlgorithm.add.html';
                var controller = 'SignatureAlgorithmCntrl';
                popupUtil.open($scope, template, controller);
            }

            function addSlo() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = true;
                var template = 'sso/serviceproviders/relyingparty/singleLogoutService/singleLogoutService.add.html';
                var controller = 'SingleLogoutCntrl';
                popupUtil.open($scope, template, controller);
            }

            function addAttributeConsumerService() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = true;
                var template = 'sso/serviceproviders/relyingparty/attributeConsumerService/attributeConsumerService.add.html';
                var controller = 'AttributeConsumerServiceCntrl';
                popupUtil.open($scope, template, controller);
            }

            function addAssertionConsumerService() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = true;
                var template = 'sso/serviceproviders/relyingparty/assertionConsumerService/assertConsumerService.add.html';
                var controller = 'AssertionConsumerServiceCntrl';
                popupUtil.open($scope, template, controller);
            }

            function editSignatureAlgorithm() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = false;
                var template = 'sso/serviceproviders/relyingparty/signatureAlgorithm/signatureAlgorithm.add.html';
                var controller = 'SignatureAlgorithmCntrl';
                popupUtil.open($scope, template, controller);
            }

            function editSlo() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = false;
                var template = 'sso/serviceproviders/relyingparty/singleLogoutService/singleLogoutService.add.html';
                var controller = 'SingleLogoutCntrl';
                popupUtil.open($scope, template, controller);
            }

            function editAttributeConsumerService() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = false;
                var template = 'sso/serviceproviders/relyingparty/attributeConsumerService/attributeConsumerService.add.html';
                var controller = 'AttributeConsumerServiceCntrl';
                popupUtil.open($scope, template, controller);
            }

            function editAssertionConsumerService() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.isAddRelyingParty = false;
                var template = 'sso/serviceproviders/relyingparty/assertionConsumerService/assertConsumerService.add.html';
                var controller = 'AssertionConsumerServiceCntrl';
                popupUtil.open($scope, template, controller);
            }

            function removeSlo(slos, slo){

                if(slos && slo) {
                    for (var i = 0; i < slos.length; i++) {

                        if (slos[i].name == slo.name) {
                            slos.splice(i, 1);
                            break;
                        }
                    }
                }
            }

            function removeAttributeConsumerService(slos, slo){

                if(slos && slo) {
                    for (var i = 0; i < slos.length; i++) {

                        if (slos[i].name == slo.name) {
                            slos.splice(i, 1);
                            break;
                        }
                    }
                }
            }

            function removeAssertionConsumerService(slos, slo){

                if(slos && slo) {
                    for (var i = 0; i < slos.length; i++) {

                        if (slos[i].name == slo.name) {
                            slos.splice(i, 1);
                            break;
                        }
                    }
                }
            }

            function removeSignatureAlgorithm(signs, sign){

                if(signs && sign) {
                    for (var i = 0; i < signs.length; i++) {

                        if (signs[i].priority == sign.priority &&
                            signs[i].minKeySize == sign.minKeySize &&
                            signs[i].maxKeySize == sign.maxKeySize) {
                            signs.splice(i, 1);
                            break;
                        }
                    }
                }
            }

            function viewCertificate(rp){
                $rootScope.globals.popup_errors = null;
                if(rp.certificate) {
                    var template = 'shared/components/certificate/certificate.view.html';
                    var controller = 'CertificateViewerCntrl';
                    Util.viewCertificate($scope, rp.certificate.encoded, template, controller);
                }
            }

            function viewSlo(slo) {
                $rootScope.globals.popup_errors = null;
                if(slo) {
                    $scope.vm.selectedSlo = slo;
                    var template = 'sso/serviceproviders/relyingparty/singleLogoutService/singleLogoutService.view.html';
                    var controller = 'SingleLogoutCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }
            function viewAttributeConsumerServices(acs) {
                $rootScope.globals.popup_errors = null;
                if(acs) {
                    $scope.vm.selectedAttributeConsumerService = acs;
                    var template = 'sso/serviceproviders/relyingparty/attributeConsumerService/attributeConsumerService.view.html';
                    var controller = 'AttributeConsumerServiceCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }
            function viewAssertionConsumerServices(acs) {
                $rootScope.globals.popup_errors = null;
                if(acs) {
                    $scope.vm.selectedAssertionConsumerService = acs;
                    var template = 'sso/serviceproviders/relyingparty/assertionConsumerService/assertConsumerService.view.html';
                    var controller = 'AssertionConsumerServiceCntrl';
                    popupUtil.open($scope, template, controller);
                }
            }

            function updateRelyingParty(rp){
                $rootScope.globals.errors = '';
                RelyingPartyService
                    .Update($rootScope.globals.currentUser, rp)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Relying Party ' + rp.name + ' added successfully', success:true};
                            $scope.selectedRelyingParty = {};
                            $scope.vm.getallrelyingparty();
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }

            function saveRelyingParty(rp){
                $rootScope.globals.errors = '';
                RelyingPartyService
                    .Create($rootScope.globals.currentUser, rp)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Relying Party ' + rp.name + ' added successfully', success:true};
                            $scope.newRelyingParty = {};
                            $scope.vm.getallrelyingparty();
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }

            function isValidRelyingParty(rp) {

                return (rp &&
                    rp.name && rp.url && rp.certificate &&
                    rp.signatureAlgorithms && rp.signatureAlgorithms.length > 0 &&
                    rp.singleLogoutServices && rp.singleLogoutServices.length > 0 &&
                    rp.assertionConsumerServices && rp.assertionConsumerServices.length > 0 &&
                    rp.attributeConsumerServices && rp.attributeConsumerServices.length > 0 &&
                    rp.certificate.metadata.subject != "DC=" &&
                    rp.certificate.metadata.subject.indexOf('undefined') == -1);
            }

        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('TenantCntrl', ['$scope', '$rootScope', 'TenantService', 'OidcClientService', 'OpenIdConnectService', 'Util',
        function($scope, $rootScope, TenantService, OidcClientService, OpenIdConnectService, Util) {

            $scope.addtenant = addtenant;
            $scope.setprivatekeycontent = setprivatekeycontent;
            $scope.setcertificatecontent = setcertificatecontent;
            $scope.removecertificate = removecertificate;
            $scope.viewcertificate = viewcertificate;
            $scope.isValid = isValid;

            init();


            function viewcertificate(certificate) {
                if (certificate) {
                    var template = 'shared/components/certificate/certificate.view.html';
                    var controller = 'CertificateViewerCntrl';
                    Util.viewCertificate($scope, certificate.encoded, template, controller);

                }
            }

            function init(){
                $scope.newtenant = {
                    credentials: {
                        certificates: [],
                        privateKey:{}
                    }
                };
            }
            function addtenant(tenant) {
                $scope.vm.isSaving = true;
                $rootScope.globals.errors = null;
                var newchain = {
                    privateKey: {
                        algorithm: tenant.credentials.privateKey.algorithm,
                        encoded: Util.extractBase64Encoded(tenant.credentials.privateKey.encoded)
                    },
                    certificates: []
                };

                for (var i = 0; i < tenant.credentials.certificates.length; i++) {
                    var certificate = {encoded: tenant.credentials.certificates[i].encoded};
                    newchain.certificates.push(certificate);
                }

                if(newchain.certificates.length < 2)
                {
                    $rootScope.globals.errors = { details : 'At-least 2 certificates needs to be present.'};
                    return;
                }

                var newTenant = {
                    name: tenant.name,
                    username: tenant.username + '@' + tenant.name,
                    password: tenant.password,
                    credentials: newchain
                };

                TenantService
                    .Create($rootScope.globals.currentUser, newTenant)
                    .then(function (res4) {
                        if (res4.status == 200) {
                            OpenIdConnectService
                                .GetToken($rootScope.globals.currentUser.server, newTenant.name, newTenant.username, newTenant.password)
                                .then(function (res1) {
                                    if (res1.status == 200) {

                                        var uri = "https://" + $rootScope.globals.currentUser.server + "/lightwaveui";
                                        var client = {
                                            "redirectUris": [uri + "/Home"],
                                            "tokenEndpointAuthMethod": "none",
                                            "postLogoutRedirectUris": [uri],
                                            "logoutUri": uri
                                        };
                                        var token = res1.data;
                                        OidcClientService
                                            .Create($rootScope.globals.currentUser.server, token , tenant.name, client)
                                            .then(function (res2) {
                                                if (res2.status == 200) {
                                                    var clientId = res2.data.clientId;
                                                    OidcClientService
                                                        .AddClientId($rootScope.globals.currentUser.server, token , tenant.name, clientId)
                                                        .then(function (res3) {
                                                            if (res3.status == 200) {
                                                                $scope.vm.tenants.push(tenant);
                                                                $scope.newtenant = {
                                                                    credentials: {
                                                                        certificates: [],
                                                                        privateKey: {}
                                                                    }
                                                                };
                                                                $rootScope.globals.errors = {
                                                                    details: 'Tenant ' + tenant.name + ' added successfully',
                                                                    success: true
                                                                };
                                                                $scope.vm.gettenants('');
                                                                $scope.closeThisDialog('save');
                                                            }
                                                            else {
                                                                $rootScope.globals.popup_errors = {details: "OIDC client ID could not be saved"};
                                                            }
                                                        });
                                                }
                                                else {
                                                    $rootScope.globals.popup_errors = res2.data;
                                                }
                                            });
                                    }
                                    else {
                                        $rootScope.globals.popup_errors = res1.data;
                                    }
                                });
                        }
                        else {
                            $rootScope.globals.popup_errors = res4.data;
                        }
                        $scope.vm.isSaving = false;
                    });
            }

            function setprivatekeycontent(tenant, contents) {

                //tenant.privateKeyFilePath = "(selected)";
                tenant.credentials.privateKey = {
                    algorithm: 'RSA',
                    encoded: contents
                };
            }

            function setcertificatecontent(tenant, contents) {

                tenant.certFilePath = "(selected)";
                var metadata = Util.getCertificateDetails(contents);
                var certificate = {
                    encoded: contents,
                    metadata: metadata
                };
                tenant.credentials.certificates.push(certificate);
            }

            function removecertificate(chain, certificate)
            {
                for (var i = 0; i < chain.length; i++) {
                    if (chain[i].encoded == certificate.encoded) {
                        chain.splice(i,1);
                        break;
                    }
                }
            }

            function isValid() {
                return ($scope.newtenant.credentials
                && $scope.newtenant.credentials.certificates
                && $scope.newtenant.credentials.certificates.length >= 2
                && $scope.newtenant.credentials.privateKey);
            }
    }]);

/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('HandleHttpResponse', HandleHttpResponse);

function HandleHttpResponse() {

    var service = {};
    service.Success = Success;
    service.Failure = Failure;
    return service;

    function Success(res)
    {
        return res;
        /*{
            data: res.data,
            success : true
        };*/
    }

    function Failure(res)
    {
        return res;
        /*return {
            error: res.data.error + ' - ' + res.data.details,
            success : false
        };*/
    }

}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var sso_service_module = angular.module('lightwave.ui.sso.services');
sso_service_module.factory('HttpConfiguration', HttpConfiguration);


function HttpConfiguration(){

    var config = {};
    config.getHeaders = getHeaders;
    return config;

    function getHeaders(token, contentType) {

        if(token){
            var header1 =
            {
                "Content-Type": contentType,
                "Authorization": token.token_type + " " + token.access_token
            };
            return header1;
        }
        else {
            var header2 =
            {
                "Content-Type": contentType
            };
            return header2;
        }
    }
}
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('GroupCntrl', [ '$scope', '$rootScope', 'GroupService',
        function($scope, $rootScope, GroupService) {

            $scope.saveGroup = saveGroup;
            $scope.updateGroup = updateGroup;

            init();

            function init(){
                $rootScope.globals.errors = '';
                $rootScope.globals.popup_errors = null;
                $scope.newGroup = {};
            }

            function saveGroup(group){
                $rootScope.globals.errors = '';
                var provider_name = $scope.vm.identitysource.name;
                group.upn = group.name + "@" + provider_name;
                group.domain = provider_name;
                GroupService
                    .Add($rootScope.globals.currentUser, group)
                    .then(function (res) {
                        if(res.status == 200) {
                            $rootScope.globals.errors = {details: 'Group ' + group.upn + ' added successfully', success:true};
                            $scope.newgroup = {};
                            $scope.getgroups($scope.vm.identitysources, $scope.vm.groupsearch);
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }

            function updateGroup(group){
                $rootScope.globals.errors = '';
                var newgroup = {
                    upn: group.name + "@" + group.domain,
                    name: null,
                    domain: null,
                    details: {
                        description: group.details.description
                    },
                    objectId: null
                };
                GroupService
                    .Update($rootScope.globals.currentUser, newgroup)
                    .then(function (res) {
                        if(res.status == 200) {
                            $rootScope.globals.errors = {details: 'Group ' + newgroup.upn + ' updated successfully', success:true};
                            $scope.getgroups($scope.vm.identitysources, $scope.vm.groupsearch);
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('GroupMembersCntrl', [ '$scope', '$rootScope', 'GroupService', 'MemberService',
        function($scope, $rootScope, GroupService, MemberService) {

            $scope.vm.saveMembers = saveMembers;
            $scope.vm.deleteSelectedMembers = deleteSelectedMembers;
            $scope.vm.canDeleteSelectedMembers = canDeleteSelectedMembers;
            $scope.vm.getAllMembers = getAllMembers;
            $scope.vm.clearMemberSearch = clearMemberSearch;
            $scope.vm.searchMembers = searchMembers;
            $scope.vm.addMembersToGroup = addMembersToGroup;
            $scope.vm.searchSelectedMembers = searchSelectedMembers;
            $scope.vm.disable = disable;

            init();

            function init() {
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
                var group = $scope.vm.selectedGroup;
                $scope.vm.selectedmembersearch = '';
                getMembers(group, '');

                if ($scope.vm.identitysource) {
                    $scope.vm.idsmembersearch = $scope.vm.identitysource;
                    getAllMembers($scope.vm.idsmembersearch);
                }
                clearMemberSearch();
            }

            function searchSelectedMembers() {
                $rootScope.globals.popup_errors = null;
                var group = $scope.vm.selectedGroup;
                var text = $scope.vm.selectedmembersearch;
                getMembers(group, text);
            }

            function getMembers(group, searchText) {
                $rootScope.globals.popup_errors = null;
                $scope.vm.searchSelectedMembersLoading = true;
                $scope.currentgroup = {};
                var upn = group.name + "@" + group.domain;
                GroupService
                    .Get($rootScope.globals.currentUser, upn)
                    .then(function (res) {
                        if (res.status == 200) {
                            $scope.currentgroup = res.data;
                            $scope.currentgroup.members = {};
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    })
                    .then(function (res) {
                        if ($scope.currentgroup) {
                            GroupService
                                .GetMembership($rootScope.globals.currentUser, upn, "USER")
                                .then(function (res) {
                                    if (res.status == 200) {
                                        $scope.currentgroup.members.users = [];
                                        if (res.data.users) {
                                            for (var i = 0; i < res.data.users.length; i++) {
                                                if (!search || searchText == '' || res.data.users[i].name.indexOf(searchText) > -1) {
                                                    $scope.currentgroup.members.users.push(res.data.users[i]);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        $rootScope.globals.popup_errors = res.data;
                                    }
                                });
                        }
                    })
                    .then(function (res) {
                        if ($scope.currentgroup) {
                            GroupService
                                .GetMembership($rootScope.globals.currentUser, upn, "SOLUTIONUSER")
                                .then(function (res) {
                                    if (res.status == 200) {
                                        $scope.currentgroup.members.solutionusers = [];
                                        if (res.data.solutionUsers) {
                                            for (var i = 0; i < res.data.solutionUsers.length; i++) {
                                                if (!searchText || searchText == '' || res.data.solutionUsers[i].name.indexOf(searchText) > -1) {
                                                    $scope.currentgroup.members.solutionusers.push(res.data.solutionUsers[i]);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        $rootScope.globals.popup_errors = res.data;
                                    }
                                });
                        }
                    })
                    .then(function (res) {
                        if ($scope.currentgroup) {
                            GroupService
                                .GetMembership($rootScope.globals.currentUser, upn, "GROUP")
                                .then(function (res) {
                                    if (res.status == 200) {
                                        $scope.currentgroup.members.groups = [];
                                        if (res.data.groups) {
                                            for (var i = 0; i < res.data.groups.length; i++) {
                                                if (!searchText || searchText == '' || res.data.groups[i].name.indexOf(searchText) > -1) {
                                                    $scope.currentgroup.members.groups.push(res.data.groups[i]);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        $rootScope.globals.popup_errors = res.data;
                                    }
                                    $scope.vm.searchSelectedMembersLoading = false;
                                });
                        }
                    })
            }

            function disable() {

                var group = $scope.currentgroup;
                if (group.members) {
                    if (group.members.groups) {
                        for (var j = group.members.groups.length - 1; j >= 0; j--) {
                            if (group.members.groups[j].state == 2 ||
                                group.members.groups[j].state == 1) {
                                return false;
                            }
                        }
                    }

                    if (group.members.users) {
                        for (var i = group.members.users.length - 1; i >= 0; i--) {
                            if (group.members.users[i].state == 2 ||
                                group.members.users[i].state == 1) {
                                return false;
                            }
                        }
                    }
                }

                return true;
            }

            function saveMembers() {

                $rootScope.globals.popup_errors = null;
                var group = $scope.currentgroup;
                var upn = group.name + '%40' + group.domain;

                if (group.members) {

                    $scope.vm.isSaving = true;

                    if (group.members.groups) {

                        var deletedgroups = '';
                        for (var i = group.members.groups.length - 1; i >= 0; i--) {
                            if (group.members.groups[i].state == 2) {
                                deletedgroups += 'members=' + group.members.groups[i].name + '@' + group.members.groups[i].domain + '&';
                            }
                        }

                        var addedgroups = '';
                        for (var i = group.members.groups.length - 1; i >= 0; i--) {
                            if (group.members.groups[i].state == 1) {
                                addedgroups += 'members=' + group.members.groups[i].name + '@' + group.members.groups[i].domain + '&';
                            }
                        }

                        if (addedgroups != '') {
                            GroupService
                                .UpdateMembers($rootScope.globals.currentUser, upn, addedgroups, 'GROUP')
                                .then(function (res) {
                                    if (!res.status == 200) {
                                        $rootScope.globals.popup_errors += res.data;
                                    }
                                    $scope.vm.isSaving = false;
                                });
                        }

                        if (deletedgroups != '') {
                            GroupService
                                .DeleteMembers($rootScope.globals.currentUser, upn, deletedgroups, 'GROUP')
                                .then(function (res) {
                                    if (!res.status == 200) {
                                        $rootScope.globals.popup_errors += res.data;
                                    }
                                    $scope.vm.isSaving = false;
                                });
                        }
                    }

                    if (group.members.users) {

                        var deletedusers = '';
                        for (var i = group.members.users.length - 1; i >= 0; i--) {
                            if (group.members.users[i].state == 2) {
                                deletedusers += 'members=' + group.members.users[i].name + '@' + group.members.users[i].domain + '&';
                            }
                        }

                        var addedusers = '';
                        for (var i = group.members.users.length - 1; i >= 0; i--) {
                            if (group.members.users[i].state == 1) {
                                addedusers += 'members=' + group.members.users[i].name + '@' + group.members.users[i].domain + '&';
                            }
                        }

                        if (addedusers != '') {
                            GroupService
                                .UpdateMembers($rootScope.globals.currentUser, upn, addedusers, 'USER')
                                .then(function (res) {
                                    if (!res.status == 200) {
                                        $rootScope.globals.popup_errors += res.data;
                                    }
                                    $scope.vm.isSaving = false;
                                });
                        }
                        if (deletedusers != '') {
                            GroupService
                                .DeleteMembers($rootScope.globals.currentUser, upn, deletedusers, 'USER')
                                .then(function (res) {
                                    if (!res.status == 200) {
                                        $rootScope.globals.popup_errors += res.data;
                                    }
                                    $scope.vm.isSaving = false;
                                });
                        }
                    }
                }
                else {
                    $scope.vm.isSaving = false;
                }
            }

            function getAllMembers(provider) {
                $scope.membersearchtype = $scope.membersearchtypes[2];
                searchMembers('', provider, $scope.membersearchtype);
            }

            function clearMemberSearch() {
                $rootScope.globals.popup_errors = null;
                $scope.vm.membersearch = '';
                $scope.vm.membersearchresult = {};
            }

            function searchMembers(searchvalue, provider, type) {

                if (provider && type) {
                    $rootScope.globals.popup_errors = null;
                    var typename = type.name;
                    $scope.vm.membersearchresult = {};
                    $scope.vm.searchMembersLoading = true;
                    if (type.name == "user") {
                        MemberService
                            .Search($rootScope.globals.currentUser, provider.name, "USER", "NAME", searchvalue)
                            .then(function (res) {
                                if (res.status == 200) {
                                    $scope.vm.membersearchresult.users = res.data.users;
                                    $scope.vm.searchMembersLoading = false;
                                }
                                else {
                                    $rootScope.globals.popup_errors = res.data;
                                }
                            });

                    } else if (type.name == "group") {
                        MemberService
                            .Search($rootScope.globals.currentUser, provider.name, "GROUP", "NAME", searchvalue)
                            .then(function (res) {
                                if (res.status == 200) {
                                    $scope.vm.membersearchresult.groups = res.data.groups;
                                    $scope.vm.searchMembersLoading = false;
                                }
                                else {
                                    $rootScope.globals.popup_errors = res.data;
                                }
                            });
                    } else if (type.name == "all") {
                        MemberService
                            .Search($rootScope.globals.currentUser, provider.name, "ALL", "NAME", searchvalue)
                            .then(function (res) {
                                if (res.status == 200) {
                                    $scope.vm.membersearchresult.users = res.data.users;
                                    $scope.vm.membersearchresult.groups = res.data.groups;
                                    $scope.vm.searchMembersLoading = false;
                                }
                                else {
                                    $rootScope.globals.popup_errors = res.data;
                                }
                            })
                    }
                }
            }


            function addMembersToGroup() {
                $rootScope.globals.popup_errors = null;
                if ($scope.vm.membersearchresult) {
                    var dupUsers = addUserMembers();
                    var dupGroups = addGroupMembers();

                    var duplicate = dupUsers + dupGroups;
                    if(duplicate != ''){
                        $rootScope.globals.popup_errors = { details : "Duplicate: Member(s) already exist - " + duplicate };
                    }
                }
            }

            function addUserMembers() {
                var group = $scope.currentgroup;
                var duplicate = '';
                if (group.members == null)
                    group.members = {};
                if (group.members.users == null)
                    group.members.users = [];
                /* check duplicate */
                var dup = false;
                var user = null;

                if ($scope.vm.membersearchresult.users) {
                    for (var j = 0; j < $scope.vm.membersearchresult.users.length; j++) {
                        user = $scope.vm.membersearchresult.users[j];
                        if (user.markedForAdd) {
                            for (var i = 0; i < group.members.users.length; i++) {
                                if (group.members.users[i].name == user.name &&
                                    group.members.users[i].domain == user.domain) {
                                    if (group.members.users[i].state == 2) {
                                        group.members.users[i].state = 0;
                                    }
                                    dup = true;
                                    break;
                                }
                            }
                            if (!dup && user) {
                                user.state = 1;
                                group.members.users.push(user);
                                user.markedForAdd = false;
                            }

                            if(dup)
                            {
                                duplicate = duplicate + " " + user.name + "@" + user.domain + " ";
                            }
                        }
                    }
                }
                return duplicate;
            }

            function addGroupMembers() {
                var group = $scope.currentgroup;
                var duplicate = '';
                if (group.members == null)
                    group.members = {};
                if (group.members.groups == null)
                    group.members.groups = [];

                /* check duplicate */
                var dup = false;
                var member = null;

                if ($scope.vm.membersearchresult.groups) {
                    for (var j = 0; j < $scope.vm.membersearchresult.groups.length; j++) {
                        member = $scope.vm.membersearchresult.groups[j];
                        if (member.markedForAdd) {

                            if (member.name != group.name || member.domain != group.domain) {

                                for (var i = 0; i < group.members.groups.length; i++) {
                                    if (group.members.groups[i].name == member.name &&
                                        group.members.groups[i].domain == member.domain) {
                                        if (group.members.groups[i].state == 2) {
                                            group.members.groups[i].state = 0;
                                        }
                                        dup = true;
                                        break;
                                    }
                                }
                                if (!dup && member) {
                                    member.state = 1;
                                    group.members.groups.push(member);
                                }
                                if(dup)
                                {
                                    duplicate = duplicate + " " + member.name + "@" + member.domain + " ";
                                }
                            }
                            else {
                                member.markedForAdd = false;
                                $rootScope.globals.popup_errors = {details: 'Cannot add a group as member to itself.'};
                            }
                        }
                    }
                }
                return duplicate;
            }

            function canDeleteSelectedMembers() {

                var group = $scope.currentgroup;
                if (group.members) {
                    if (group.members.users) {
                        for (var i = group.members.users.length - 1; i >= 0; i--) {
                            if (group.members.users[i].markedForDelete) {
                                return true;
                            }
                        }
                    }

                    if (group.members.groups) {
                        for (var i = group.members.groups.length - 1; i >= 0; i--) {
                            if (group.members.groups[i].markedForDelete) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }


            function deleteSelectedMembers() {

                $rootScope.globals.popup_errors = null;
                deleteUserMembers();
                deleteGroupMembers();
            }

            function deleteUserMembers() {

                var group = $scope.currentgroup;
                if (group.members == null || group.members.users == null)
                    return;
                /* check duplicate */
                var found = false;
                for (var i = group.members.users.length - 1; i >= 0; i--) {
                    if (group.members.users[i].markedForDelete) {
                        found = true;

                        if (group.members.users[i].state == 1) {
                            group.members.users.splice(i, 1);
                        }
                        else {
                            group.members.users[i].state = 2;
                        }
                    }
                }
            }

            function deleteGroupMembers() {

                var group = $scope.currentgroup;

                if (group.members == null || group.members.groups == null)
                    return;

                /* check duplicate */
                var found = false;
                for (var i = group.members.groups.length - 1; i >= 0; i--) {
                    if (group.members.groups[i].markedForDelete) {
                        found = true;

                        if (group.members.groups[i].state == 1) {
                            group.members.groups.splice(i, 1);
                        }
                        else {
                            group.members.groups[i].state = 2;
                        }
                    }
                }
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('SolutionUserCntrl', [ '$scope', '$rootScope', 'SolutionUserService', 'Util',
        function($scope, $rootScope, SolutionUserService, Util) {
            $scope.solnuservm = {};
            $scope.solnuservm.viewcertificate = viewcertificate;
            $scope.saveSolutionUser = saveSolutionUser;
            $scope.setCertificate = setCertificate;
            $scope.setSelectedCertificate = setSelectedCertificate;
            $scope.updateSolutionUser = updateSolutionUser;
            $scope.isValid = isValid;
            $scope.isSelectedCertificateValid = isSelectedCertificateValid;

            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
                $scope.newSolutionUser = {};
            }

            function viewcertificate(){
                if($scope.vm.selectedSolutionUser.certificate) {
                    var template = 'shared/components/certificate/certificate.view.html';
                    var controller = 'CertificateViewerCntrl';
                    Util.viewCertificate($scope, $scope.vm.selectedSolutionUser.certificate.encoded, template, controller);
                }
            }

            function isValid(user){

                if(user && user.name && user.certificate && user.certificate.encoded) {

                    try {
                        var x = new X509();
                        x.readCertPEM(user.certificate.encoded);
                        var info = x.getIssuerString();
                        return info == '/undefined=';
                    }
                    catch(e){
                        return true;
                    }
                }
                return true;
            }

            function isSelectedCertificateValid(solutionUser, certificate){

                if(certificate && certificate.encoded) {

                    try {
                        var x = new X509();
                        x.readCertPEM(certificate.encoded);
                        var info = x.getIssuerString();
                        var failed = (info == '/undefined=');

                        if(!failed){
                            solutionUser.certificate.encoded = certificate.encoded;
                        }
                        return failed;
                    }
                    catch(e){
                        return true;
                    }
                }
                return true;
            }

            function saveSolutionUser(solutionuser){
                $rootScope.globals.errors = '';
                var provider = $scope.vm.identitysource;
                solutionuser.upn = solutionuser.name + "@" + provider.name;
                solutionuser.alias = { name: solutionuser.name, domain: provider.name };
                solutionuser.domain = provider.name;
                SolutionUserService
                    .Add($rootScope.globals.currentUser, solutionuser)
                    .then(function (res) {
                            if (res.status == 200) {
                                $rootScope.globals.errors = {details: 'Solution User ' + solutionuser.upn + ' added successfully', success:true};
                                $scope.newsolutionuser = {};
                                $scope.getsolutionusers($scope.vm.identitysources, $scope.vm.solutionusersearch);
                                $scope.closeThisDialog('save');
                            }
                            else {
                                $rootScope.globals.popup_errors = res.data;
                            }

                    });
            }

            function updateSolutionUser(solutionUser){
                $rootScope.globals.errors = '';
                solutionUser.upn = solutionUser.name + "@" + solutionUser.domain;
                solutionUser.alias = {name: solutionUser.name, domain: solutionUser.domain};
                SolutionUserService
                    .Update($rootScope.globals.currentUser, solutionUser)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Solution User ' + solutionUser.upn + ' updated successfully', success:true};
                            $scope.getsolutionusers($scope.vm.identitysources, $scope.vm.solutionusersearch);
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }

            function setCertificate(solutionuser, contents){
                $rootScope.globals.errors = '';
                if(!solutionuser.certificate)
                {
                    solutionuser.certificate = {};
                }
                solutionuser.certificate.encoded = contents;
            }

            function setSelectedCertificate(solutionuser, contents){
                $rootScope.globals.errors = '';
                if(!solutionuser.selCertificate)
                {
                    solutionuser.selCertificate = {};
                }
                solutionuser.selCertificate.encoded = contents;
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('UserCntrl', [ '$scope', '$rootScope', 'UserService', 'Util',
        function($scope, $rootScope, UserService, Util) {

            $scope.saveUser = saveUser;
            $scope.updateUser = updateUser;
            $scope.updateUserPassword = updateUserPassword;
            $scope.numberToTime = Util.numberToTime;
            $scope.unixToDateText = Util.unixToDateText;
            $scope.isValid = isValid;
            init();

            function init(){
                $rootScope.globals.errors = null;
                $rootScope.globals.popup_errors = null;
                $scope.newuser = {};
            }

            function isValid(newPassword, confirmPassword){
                return (newPassword &&
                confirmPassword &&
                newPassword == confirmPassword);
            }

            function saveUser(user){
                $rootScope.globals.errors = '';
                var provider = $scope.vm.identitysource;
                user.details.upn = user.name + "@" + provider.name;
                user.alias = { name: user.name, domain: provider.name };
                user.domain = provider.name;

                if(!user.disabled) {
                    user.disabled = false;
                }
				user.locked = false;
                UserService
                    .Add($rootScope.globals.currentUser, user)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'User ' + user.details.upn + ' added successfully', success:true};
                            $scope.newuser = {};
                            $scope.addNewUser = true;
                            $scope.currentPassword = null;
                            $scope.getusers(provider, $scope.vm.search);
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }

            function updateUser(user){
                $rootScope.globals.errors = '';
                var provider = $scope.vm.identitysource;
                user.details.upn = user.name + "@" + provider.name;
                user.alias = { name: user.name, domain: provider.name };
                user.domain = provider.name;
                UserService
                    .Update($rootScope.globals.currentUser, user)
                    .then(function (res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'User ' + user.details.upn + ' updated successfully', success:true};
                            $scope.getusers(provider, $scope.vm.search);
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                    });
            }

            function updateUserPassword(user){
                $rootScope.globals.errors = '';
                var provider = $scope.vm.identitysource;
                user.details.upn = user.name + "@" + provider.name;
                user.alias = { name: user.name, domain: provider.name };
                user.domain = provider.name;

                UserService
                    .SetPassword($rootScope.globals.currentUser, user, user.passwordDetails)
                    .then(function(res) {
                        if (res.status == 200) {
                            $rootScope.globals.errors = {details: 'Password for user ' + user.details.upn + ' updated successfully', success:true};
                            user.passwordDetails.newPassword = '';
                            user.passwordDetails.confirmpassword = '';
                            $scope.closeThisDialog('save');
                        }
                        else {
                            $rootScope.globals.popup_errors = res.data;
                        }
                });
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.components');
module.controller('CertificateViewerCntrl', [ '$scope',
        function($scope) {
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.components');
module.config(['$routeProvider', function($routeProvider) {
    $routeProvider
        .when('/sharedcertificate', {
            templateUrl: 'shared/components/certificate/certificate.view.html',
            controller: 'CertificateViewerCntrl'
        });
}]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.shared.components');
module.controller('PasswordCntrl', [ '$scope', '$rootScope', 'UserService',
    function($scope, $rootScope, UserService) {
        $scope.vm = this;
        $scope.vm.updatePassword = updatePassword;
        $scope.vm.isValid = isValid;

        init();

        function init(){
            $rootScope.globals.errors = null;
            $rootScope.globals.popup_errors = null;
        }
        function updatePassword() {

            $rootScope.globals.errors = '';
            var password = {
                newPassword : $scope.newPassword,
                currentPassword : $scope.currentPassword
            };
            var provider = $rootScope.globals.currentUser.tenant;
            var username = $rootScope.globals.currentUser.username;
            var user = {
                details: { upn: username },
                alias: {
                    name: username,
                    domain: provider
                },
                domain: provider,
                passwordDetails: password
            };
            UserService
                .SetPassword($rootScope.globals.currentUser, user, user.passwordDetails)
                .then(function(res) {
                    if (res.status == 200) {
                        $rootScope.globals.errors = {details: 'Password for user ' + user.details.upn + ' updated successfully', success:true};
                        $scope.newPassword = '';
                        $scope.currentPassword = '';
                        $scope.closeThisDialog('save');
                    }
                    else {
                        $rootScope.globals.popup_errors = res.data;
                    }
                });
        }

        function isValid(){
            return ($scope.newPassword &&
            $scope.confirmpassword &&
            $scope.currentPassword &&
            $scope.confirmpassword == $scope.newPassword);
        }
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


var module = angular.module('lightwave.ui.shared.directives');
module.directive('errorPanel', [errorPanelDirective]);

function errorPanelDirective() {
    return {
        restrict: 'A',
        scope : false,
        templateUrl:"/shared/directives/error/error.html",
        replace: true
    };
}

/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('SloServiceCntrl', [ '$scope', '$rootScope',
        function($scope, $rootScope) {

            $scope.vm.saveSlo = saveSlo;
            $scope.vm.isValidSlo = isValidSlo;

            init();

            function init() {
                $rootScope.globals.errors = '';
                $rootScope.globals.popup_errors = null;
                $scope.vm.newSlo = {};
            }

            function saveSlo(slo) {

                if($scope.vm.isNewIdentityProvider) {
                    if(!$scope.vm.newIdentityProvider.sloServices) {
                        $scope.vm.newIdentityProvider.sloServices = [];
                    }
                    $scope.vm.newIdentityProvider.sloServices.push(slo);
                } else {
                    if(!$scope.vm.selectedIdentityProvider.sloServices) {
                        $scope.vm.selectedIdentityProvider.sloServices = [];
                    }
                    $scope.vm.selectedIdentityProvider.sloServices.push(slo);
                }
                $scope.closeThisDialog('save');
            }

            function isValidSlo(slo) {
                return (slo &&
                slo.name &&
                slo.endpoint &&
                slo.binding);
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('SsoServiceCntrl', [ '$scope', '$rootScope',
    function($scope, $rootScope) {

        $scope.vm.saveSso = saveSso;
        $scope.vm.isValidSso = isValidSso;

        init();

        function init() {
            $rootScope.globals.errors = '';
            $rootScope.globals.popup_errors = null;
            $scope.vm.newSso = {};
        }

        function saveSso(sso) {

            if($scope.vm.isNewIdentityProvider) {
                if(!$scope.vm.newIdentityProvider.ssoServices) {
                    $scope.vm.newIdentityProvider.ssoServices = [];
                }
                $scope.vm.newIdentityProvider.ssoServices.push(sso);
            } else {
                if(!$scope.vm.selectedIdentityProvider.ssoServices) {
                    $scope.vm.selectedIdentityProvider.ssoServices = [];
                }
                $scope.vm.selectedIdentityProvider.ssoServices.push(sso);
            }
            $scope.closeThisDialog('save');
        }

        function isValidSso(sso) {
            return (sso &&
            sso.name &&
            sso.endpoint &&
            sso.binding);
        }
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('SubjectFormatCntrl', [ '$scope', '$rootScope',
    function($scope, $rootScope) {

        $scope.vm.saveSubjectFormat = saveSubjectFormat;
        $scope.vm.isValidSubjectFormat = isValidSubjectFormat;

        init();

        function init() {
            $rootScope.globals.errors = '';
            $rootScope.globals.popup_errors = null;
            $scope.vm.newSubjectFormat = {};
        }

        function saveSubjectFormat(subjectFormat) {

            if(subjectFormat && isValidSubjectFormat(subjectFormat)) {

                if($scope.vm.isNewIdentityProvider)
                {
                    if(!$scope.vm.newIdentityProvider.subjectFormats) {
                        $scope.vm.newIdentityProvider.subjectFormats = {};
                    }
                    $scope.vm.newIdentityProvider.subjectFormats[subjectFormat.key] = subjectFormat.value;
                } else {
                    if(!$scope.vm.selectedIdentityProvider.subjectFormats) {
                        $scope.vm.selectedIdentityProvider.subjectFormats = {};
                    }
                    $scope.vm.selectedIdentityProvider.subjectFormats[subjectFormat.key] = subjectFormat.value;
                }

                $scope.closeThisDialog('save');
            }
        }

        function isValidSubjectFormat(subjectFormat) {

            var isValid = (subjectFormat &&
            subjectFormat.key &&
            subjectFormat.value);

            if(isValid){

                if($scope.vm.isNewIdentityProvider) {

                    if($scope.vm.newIdentityProvider.SubjectFormatServices
                        && $scope.vm.newIdentityProvider.SubjectFormatServices[subjectFormat.key]) {
                        $rootScope.globals.popup_errors = { details: 'Cannot add duplicate subject format name.'};
                        return false;
                    }
                } else {

                    if($scope.vm.selectedIdentityProvider.SubjectFormatServices
                        && $scope.vm.selectedIdentityProvider.SubjectFormatServices[subjectFormat.key]) {
                        $rootScope.globals.popup_errors = { details: 'Cannot add duplicate subject format name.'};
                        return false;
                    }
                }
                return true;
            }
            else {
                return false;
            }
        }
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('AssertionConsumerServiceCntrl', [ '$scope', '$rootScope',
        function($scope, $rootScope) {

            $scope.vm.saveAssertionConsumerService = saveAssertionConsumerService;
            $scope.vm.isValidAssertionConsumerService = isValidAssertionConsumerService;

            init();

            function init() {
                $rootScope.globals.errors = '';
                $rootScope.globals.popup_errors = null;
                $scope.vm.newAssertionConsumerService = {};
            }

            function saveAssertionConsumerService(acs) {

                if($scope.vm.isNewRelyingParty) {

                    if(!$scope.vm.newRelyingParty.assertionConsumerServices) {
                        $scope.vm.newRelyingParty.assertionConsumerServices = [];
                    }
                    $scope.vm.newRelyingParty.assertionConsumerServices.push(acs);
                    if(acs.isDefault) {
                        $scope.vm.newRelyingParty.defaultAssertionConsumerService = acs.name;
                    }
                } else {

                    if(!$scope.vm.selectedRelyingParty.assertionConsumerServices) {
                        $scope.vm.selectedRelyingParty.assertionConsumerServices = [];
                    }
                    $scope.vm.selectedRelyingParty.assertionConsumerServices.push(acs);
                    if(acs.isDefault) {
                        $scope.vm.selectedRelyingParty.defaultAssertionConsumerService = acs.name;
                    }
                }

                $scope.closeThisDialog('save');
            }

            function isValidAssertionConsumerService(acs) {
                return (acs &&
                acs.name &&
                acs.endpoint &&
                acs.binding &&
                acs.index);
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('AttributeConsumerServiceCntrl', [ '$scope', '$rootScope', 'popupUtil',
    function($scope, $rootScope, popupUtil) {

        $scope.vm.saveAttributeConsumerService = saveAttributeConsumerService;
        $scope.vm.isValidAttributeConsumerService = isValidAttributeConsumerService;
        $scope.vm.addAttribute = addAttribute;
        $scope.vm.removeAttribute = removeAttribute;
        init();

        function init() {
            $rootScope.globals.errors = '';
            $rootScope.globals.popup_errors = null;
            $scope.vm.newAttributeConsumerService = {};
        }

        function saveAttributeConsumerService(acs) {

            if($scope.vm.isNewRelyingParty) {

                if(!$scope.vm.newRelyingParty.attributeConsumerServices) {
                    $scope.vm.newRelyingParty.attributeConsumerServices = [];
                }
                $scope.vm.newRelyingParty.attributeConsumerServices.push(acs);
                if(acs.isDefault) {
                    $scope.vm.newRelyingParty.defaultAttributeConsumerService = acs.name;
                }
            } else {

                if(!$scope.vm.selectedRelyingParty.attributeConsumerServices) {
                    $scope.vm.selectedRelyingParty.attributeConsumerServices = [];
                }
                $scope.vm.selectedRelyingParty.attributeConsumerServices.push(acs);
                if(acs.isDefault) {
                    $scope.vm.selectedRelyingParty.defaultAttributeConsumerService = acs.name;
                }
            }

            $scope.closeThisDialog('save');
        }

        function isValidAttributeConsumerService(acs) {
            return (acs &&
            acs.name &&
            acs.index &&
            acs.attributes && acs.attributes.length > 0);
        }

        function addAttribute() {
            $rootScope.globals.popup_errors = null;
            var template = 'sso/serviceproviders/relyingparty/attributeConsumerService/attribute/attribute.add.html';
            var controller = 'AttributeCntrl';
            popupUtil.open($scope, template, controller);
        }


        function removeAttribute(attributes, attribute){

            if(attributes && attribute) {
                for (var i = 0; i < attributes.length; i++) {

                    if (attributes[i].name == attribute.name &&
                        attributes[i].friendlyName == attribute.friendlyName &&
                        attributes[i].nameFormat == attribute.nameFormat) {
                        attributes.splice(i, 1);
                        break;
                    }
                }
            }
        }
    }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('SignatureAlgorithmCntrl', [ '$scope', '$rootScope',
        function($scope, $rootScope) {

            $scope.vm.saveSignatureAlgorithm = saveSignatureAlgorithm;
            $scope.vm.isValidSignatureAlgorithm = isValidSignatureAlgorithm;

            init();

            function init() {
                $rootScope.globals.errors = '';
                $rootScope.globals.popup_errors = null;
                $scope.vm.newSignatureAlgorithm = {};
            }

            function saveSignatureAlgorithm(algo) {

                if($scope.vm.isNewRelyingParty) {

                    if(!$scope.vm.newRelyingParty.signatureAlgorithms) {
                        $scope.vm.newRelyingParty.signatureAlgorithms = [];
                    }
                    $scope.vm.newRelyingParty.signatureAlgorithms.push(algo);
                } else {

                    if(!$scope.vm.selectedRelyingParty.signatureAlgorithms) {
                        $scope.vm.selectedRelyingParty.signatureAlgorithms = [];
                    }
                    $scope.vm.selectedRelyingParty.signatureAlgorithms.push(algo);
                }
                $scope.closeThisDialog('save');
            }

            function isValidSignatureAlgorithm(algo) {
                return (algo &&
                algo.priority &&
                algo.minKeySize &&
                algo.maxKeySize &&
                algo.minKeySize < algo.maxKeySize);
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('SingleLogoutCntrl', [ '$scope', '$rootScope',
        function($scope, $rootScope) {

            $scope.vm.saveSingleLogout = saveSingleLogout;
            $scope.vm.isValidSingleLogout = isValidSingleLogout;

            init();

            function init() {
                $rootScope.globals.errors = '';
                $rootScope.globals.popup_errors = null;
                $scope.vm.newSingleLogout = {};
            }

            function saveSingleLogout(slo) {
                if($scope.vm.isNewRelyingParty) {

                    if(!$scope.vm.newRelyingParty.singleLogoutServices) {
                        $scope.vm.newRelyingParty.singleLogoutServices = [];
                    }
                    $scope.vm.newRelyingParty.singleLogoutServices.push(slo);
                } else {

                    if(!$scope.vm.selectedRelyingParty.singleLogoutServices) {
                        $scope.vm.selectedRelyingParty.singleLogoutServices = [];
                    }
                    $scope.vm.selectedRelyingParty.singleLogoutServices.push(slo);
                }
                $scope.closeThisDialog('save');
            }

            function isValidSingleLogout(slo) {
                return (slo &&
                slo.name &&
                slo.endpoint &&
                slo.binding);
            }
        }]);
/*
 * Copyright © 2012-2016 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

'use strict';

var module = angular.module('lightwave.ui.sso');
module.controller('AttributeCntrl', [ '$scope', '$rootScope',
    function($scope, $rootScope) {

        $scope.vm.saveAttribute = saveAttribute;
        $scope.vm.isValidAttribute = isValidAttribute;

        init();

        function init() {
            $rootScope.globals.errors = '';
            $rootScope.globals.popup_errors = null;
            $scope.vm.newAttribute = {};
        }

        function saveAttribute(attribute) {
            if(!$scope.vm.newAttributeConsumerService) {
                $scope.vm.newAttributeConsumerService = {};
            }

            if(!$scope.vm.newAttributeConsumerService.attributes) {
                $scope.vm.newAttributeConsumerService.attributes = [];
            }
            $scope.vm.newAttributeConsumerService.attributes.push(attribute);

            $scope.closeThisDialog('save');
        }

        function isValidAttribute(attribute) {
            return (attribute &&
            attribute.name &&
            attribute.nameFormat &&
            attribute.friendlyName);
        }
    }]);